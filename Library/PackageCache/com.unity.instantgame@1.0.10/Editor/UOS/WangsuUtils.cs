#if  IG_C301 || IG_C302 || IG_C303 || TUANJIE_2022_3_OR_NEWER // Auto generated by AddMacroForInstantGameFiles.exe

using System;
using System.IO;
using System.Net;
using System.Text;
using UnityEngine;
using Wangsu.WcsLib.Core;
using Wangsu.WcsLib.HTTP;
using Wangsu.WcsLib.Utility;

namespace Unity.AutoStreaming.UosCdn
{
    public class WangsuUtils
    {
        [Serializable]
        class UploadInfo
        {
            public string uploadToken;
            public string uploadUrl;
        }
        [Serializable]
        class WangsuResponse
        {
            public string ctx;
        }

        internal class WangsuAuth
        {
            public string uosAuthorizationToken;
            public string bucketUuid;
            public string uploadToken;
            public long expiredTime;
        }

        private const int MaxSingleFile = 200 * 1024 * 1024;

        internal static bool uploadMulti(string uosAuthorizationToken, string bucketUuid, EntryInfo entryInfo)
        {
            string uploadToken = GetUploadToken(uosAuthorizationToken, bucketUuid, entryInfo);
            if (string.IsNullOrEmpty(uploadToken))
            {
                return false;
            }

            Mac mac = new Mac("", "");
            Auth auth = new Auth(mac);
            Config config = new Config(UOSInfo.WcsUploadHost, UOSInfo.WcsManageHost, true);

            byte[] data;
            long size = 0;

            using (FileStream fs = new FileStream(entryInfo.full_path, FileMode.Open, FileAccess.Read))
            {
                try
                {
                    size = fs.Length;
                    data = new byte[size];
                    fs.Read(data, 0, (int)size);
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }

            //simple upload
            if (size <= MaxSingleFile) 
            {
                if(size == 0)
                    Debug.LogWarning("WangsuUtils: Empty File Found: " + entryInfo.full_path);
                SimpleUpload simple = new SimpleUpload(auth, config);

                var putExtraSimple = new PutExtra();
                putExtraSimple.MimeType = entryInfo.content_type;

                //here we use putPolicy as token
                HttpResult simRes = simple.UploadData(data, uploadToken, entryInfo.objectKey, putExtraSimple);

                if ((int)HttpStatusCode.NotAcceptable == simRes.Code)
                {
                    Debug.Log("WangsuUtils: File Already Exist. Do not need to upload.");
                    return true;
                }

                if ((int)HttpStatusCode.OK != simRes.Code)
                {
                    Debug.LogError("WangsuUtils: SimpleUpload error");
                    return false;
                }
                return true;
            }

            long blockSize = 4 * 1024 * 1024;
            int firstChunkSize = 1024;

            if (firstChunkSize > size)
            {
                firstChunkSize = (int)size;
            }

            if (blockSize > size)
            {
                blockSize = (int)size;
            }

            SliceUpload su = new SliceUpload(auth, config);
            HttpResult result = su.MakeBlock(blockSize, 0, data, 0, firstChunkSize, uploadToken, entryInfo.objectKey);

            if ((int)HttpStatusCode.NotAcceptable == result.Code)
            {
                Debug.Log("WangsuUtils: File Already Exist. Do not need to upload.");
                return true;
            }

            if ((int)HttpStatusCode.OK != result.Code)
            {
                Debug.LogError("WangsuUtils: Make block error");
                return false;
            }

            WangsuResponse wr = JsonUtility.FromJson<WangsuResponse>(result.Text);

            long blockCount = (size + blockSize - 1) / blockSize;
            string[] contexts = new string[blockCount];
            contexts[0] = wr.ctx;

            //upload data after firstChunkSize in first block
            if (firstChunkSize < blockSize)
            {
                result = su.Bput(contexts[0], firstChunkSize, data, firstChunkSize, (int)(blockSize - firstChunkSize), uploadToken, entryInfo.objectKey);

                if ((int)HttpStatusCode.OK != result.Code)
                {
                    Debug.LogError("WangsuUtils: Bput error");
                    return false;
                }

                wr = JsonUtility.FromJson<WangsuResponse>(result.Text);
                contexts[0] = wr.ctx;
            }

            // upload remainings blocksï¼Œa block each time
            for (int blockIndex = 1; blockIndex < blockCount; ++blockIndex)
            {
                long leftSize = size - blockSize * blockIndex;
                int chunkSize = (int)(leftSize > blockSize ? blockSize : leftSize);
                result = su.MakeBlock(chunkSize, blockIndex, data, (int)(blockSize * blockIndex), chunkSize, uploadToken, entryInfo.objectKey);
                if ((int)HttpStatusCode.OK == result.Code)
                {
                    wr = JsonUtility.FromJson<WangsuResponse>(result.Text);
                    contexts[blockIndex] = wr.ctx;
                }
                else
                {
                    Debug.LogError("WangsuUtils: Makeblock error");
                    return false;
                }
            }

            var putExtra = new PutExtra();
            putExtra.MimeType = entryInfo.content_type;
            result = su.MakeFile(size, entryInfo.objectKey, contexts, uploadToken, putExtra);
            if ((int)HttpStatusCode.OK != result.Code)
            {
                Debug.LogError("WangsuUtils: MakeFile error");
                return false;
            }

            return true;
        }
        
        internal static string GetUploadToken(string uosAuthorizationToken, string bucketUuid, EntryInfo entryInfo)
        {
            try
            {
                string url = UOSInfo.ApiHost + "api/v1/buckets/" + bucketUuid + "/uploadtoken/" + entryInfo.content_hash + "/";
                using (HttpWebResponse resp =
                    (HttpWebResponse) Util.GetHttpWebRequest4UOSThreaded(uosAuthorizationToken, url, "GET")
                        .GetResponse())
                {
                    if (resp.StatusCode.Equals(HttpStatusCode.OK))
                    {
                        string strJson;
                        using (Stream stream = resp.GetResponseStream())
                        {
                            using (StreamReader reader = new StreamReader(stream))
                            {
                                strJson = reader.ReadToEnd();
                            }
                        }
                        UploadInfo uploadInfo = JsonUtility.FromJson<UploadInfo>(strJson);
                        return uploadInfo.uploadToken;
                    }
                    else
                    {
                        Debug.LogError(string.Format("WangsuUtils: Get upload token error - {0}", resp.StatusCode));
                    }
                }
            }
            catch (Exception e)
            {
                Debug.LogError("WangsuUtils: Get upload token error - " + e.Message);
            }
            return "";
        }
    }
}

#endif  //  IG_C301 || IG_C302 || IG_C303 || TUANJIE_2022_3_OR_NEWER, Auto generated by AddMacroForInstantGameFiles.exe
