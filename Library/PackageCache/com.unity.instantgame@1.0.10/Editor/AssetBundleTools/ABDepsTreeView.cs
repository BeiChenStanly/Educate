#if  IG_C301 || IG_C302 || IG_C303 || TUANJIE_2022_3_OR_NEWER // Auto generated by AddMacroForInstantGameFiles.exe

using System.Collections.Generic;
using UnityEngine;
using UnityEditor;
using UnityEditor.IMGUI.Controls;
using System.Linq;
using UnityEngine.Assertions;

namespace Unity.AutoStreaming
{
    internal class ABDepDataItem : TreeDataItem
    {
        public string abName { get; set; }
        public int allDepSize { get; set; }
        public int abSize { get; set; }
        public int allDepCount { get; set; }
        public ABDepDataItem(string inABName, int depth, int id)
            : base(inABName, depth, id)
        {
            abName = inABName;
        }
    }

    internal class ABDepTreeView : TreeViewBaseT<ABDepDataItem>
    {
        enum MyColumns
        {
            AbName = 0,
            AllDepSize,
            AbSize,
            AllDepCount,
        }
        enum SortOption
        {
            AbName = 0,
            AllDepSize,
            AbSize,
            AllDepCount,
        }

        SortOption[] m_SortOptions =
        {
            SortOption.AbName,
            SortOption.AllDepSize,
            SortOption.AbSize,
            SortOption.AllDepCount,
        };

        public ABDepTreeView(TreeViewState state, MultiColumnHeader multicolumnHeader, TreeModelT<ABDepDataItem> model) : base(state, multicolumnHeader, model)
        {
            // Custom setup
            rowHeight = k_RowHeights;

            columnIndexForTreeFoldouts = 0;
            showAlternatingRowBackgrounds = true;
            showBorder = true;
            customFoldoutYOffset = (k_RowHeights - EditorGUIUtility.singleLineHeight) * 0.5f; // center foldout in the row since we also center content. See RowGUI

            multicolumnHeader.sortingChanged += OnSortingChanged;

            Reload();
        }

        protected override void SortByMultipleColumns()
        {
            var sortedColumns = multiColumnHeader.state.sortedColumns;

            if (sortedColumns.Length == 0)
                return;

            var myTypes = rootItem.children.Cast<TreeViewItemBaseT<ABDepDataItem>>();
            var orderedQuery = InitialOrder(myTypes, sortedColumns);
            for (int i = 1; i < sortedColumns.Length; i++)
            {
                SortOption sortOption = m_SortOptions[sortedColumns[i]];
                bool ascending = multiColumnHeader.IsSortedAscending(sortedColumns[i]);

                switch (sortOption)
                {
                    case SortOption.AbName:
                        orderedQuery = orderedQuery.ThenBy(l => l.Data.Name, ascending);
                        break;
                    case SortOption.AllDepSize:
                        orderedQuery = orderedQuery.ThenBy(l => l.Data.allDepSize, ascending);
                        break;
                    case SortOption.AbSize:
                        orderedQuery = orderedQuery.ThenBy(l => l.Data.abSize, ascending);
                        break;
                    case SortOption.AllDepCount:
                        orderedQuery = orderedQuery.ThenBy(l => l.Data.allDepCount, ascending);
                        break;
                }
            }

            rootItem.children = orderedQuery.Cast<TreeViewItem>().ToList();
        }

        IOrderedEnumerable<TreeViewItemBaseT<ABDepDataItem>> InitialOrder(IEnumerable<TreeViewItemBaseT<ABDepDataItem>> myTypes, int[] history)
        {
            SortOption sortOption = m_SortOptions[history[0]];
            bool ascending = multiColumnHeader.IsSortedAscending(history[0]);
            switch (sortOption)
            {
                case SortOption.AbName:
                    return myTypes.Order(l => l.Data.Name, ascending);
                case SortOption.AllDepSize:
                    return myTypes.Order(l => l.Data.allDepSize, ascending);
                case SortOption.AbSize:
                    return myTypes.Order(l => l.Data.abSize, ascending);
                case SortOption.AllDepCount:
                    return myTypes.Order(l => l.Data.allDepCount, ascending);
                default:
                    Assert.IsTrue(false, "Unhandled enum");
                    break;
            }

            // default
            return myTypes.Order(l => l.Data.Name, ascending);
        }

        public static MultiColumnHeaderState CreateDefaultMultiColumnHeaderState(float treeViewWidth)
        {
            var columns = new[]
            {
                new MultiColumnHeaderState.Column
                {
                    headerContent = new GUIContent("AssetBundle"),
                    headerTextAlignment = TextAlignment.Left,
                    sortedAscending = true,
                    sortingArrowAlignment = TextAlignment.Center,
                    width = 300,
                    minWidth = 100,
                    autoResize = false,
                    allowToggleVisibility = false
                },
                 new MultiColumnHeaderState.Column
                {
                    headerContent = new GUIContent("AllDepSize"),
                    headerTextAlignment = TextAlignment.Left,
                    sortedAscending = true,
                    sortingArrowAlignment = TextAlignment.Center,
                    width = 100,
                    minWidth = 100,
                    autoResize = false,
                    allowToggleVisibility = false
                },
                new MultiColumnHeaderState.Column
                {
                    headerContent = new GUIContent("Size"),
                    headerTextAlignment = TextAlignment.Left,
                    sortedAscending = true,
                    sortingArrowAlignment = TextAlignment.Center,
                    width = 100,
                    minWidth = 100,
                    autoResize = false,
                    allowToggleVisibility = false
                },
                new MultiColumnHeaderState.Column
                {
                    headerContent = new GUIContent("AllDep"),
                    headerTextAlignment = TextAlignment.Left,
                    sortedAscending = true,
                    sortingArrowAlignment = TextAlignment.Center,
                    width = 100,
                    minWidth = 100,
                    autoResize = false,
                    allowToggleVisibility = false
                },
           };

            var state = new MultiColumnHeaderState(columns);
            return state;
        }

        protected override void RowGUI(RowGUIArgs args)
        {
            var item = (TreeViewItemBaseT<ABDepDataItem>)args.item;

            for (int i = 0; i < args.GetNumVisibleColumns(); ++i)
            {
                CellGUI(args.GetCellRect(i), item, (MyColumns)args.GetColumn(i), ref args);
            }
        }

        const float kToggleWidth = 18f;

        void CellGUI(Rect cellRect, TreeViewItemBaseT<ABDepDataItem> item, MyColumns column, ref RowGUIArgs args)
        {
            // Center cell rect vertically (makes it easier to place controls, icons etc in the cells)
            CenterRectUsingSingleLineHeight(ref cellRect);

            switch (column)
            {
                case MyColumns.AbName:
                {
                    base.RowGUI(args);
                }
                break;
                case MyColumns.AllDepSize:
                {
                    string value = EditorUtility.FormatBytes(item.Data.allDepSize);
                    DefaultGUI.Label(cellRect, value, args.selected, args.focused);
                }
                break;
                case MyColumns.AbSize:
                {
                    string value = EditorUtility.FormatBytes(item.Data.abSize);
                    DefaultGUI.Label(cellRect, value, args.selected, args.focused);
                }
                break;
                case MyColumns.AllDepCount:
                {
                    string value = item.Data.allDepCount.ToString();
                    DefaultGUI.Label(cellRect, value, args.selected, args.focused);
                }
                break;
            }
        }
    }
}

#endif  //  IG_C301 || IG_C302 || IG_C303 || TUANJIE_2022_3_OR_NEWER, Auto generated by AddMacroForInstantGameFiles.exe
