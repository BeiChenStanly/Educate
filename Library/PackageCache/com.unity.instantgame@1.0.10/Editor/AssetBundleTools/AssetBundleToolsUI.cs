#if  IG_C301 || IG_C302 || IG_C303 || TUANJIE_2022_3_OR_NEWER // Auto generated by AddMacroForInstantGameFiles.exe

#if !IG_C106
#define ASSETBUNDLE_TOOL
#endif

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using UnityEditor;
using UnityEditor.IMGUI.Controls;
using UnityEngine;

namespace Unity.AutoStreaming
{
    internal class AssetBundleToolsUI
    {
        public List<ABTreeDataItem> mAssetBundles;
        public Dictionary<string, ABTreeDataItem> mNameToABDataItem;
        public AssetBundleManifest mAssetBundleManifest;

        public enum ABSearchMode1
        {
            ABName = 0,
            Assets,
            Dependencies,
        }
        public enum ABSearchMode2
        {
            Match = 0,
            Contains,
        }
        public ABSearchMode1 mABSearchMode1;
        public ABSearchMode2 mABSearchMode2;
        SearchField mSearchField;

        public List<List<ABObjDataItem>> mABObjsList;
        public List<ABObjDataItem> mABObjs;

        public List<List<ABAssetDataItem>> mABAssetsList;
        public List<ABAssetDataItem> mABAssets;

        public List<ABDepDataItem> mABDeps;

        private static GUIStyle s_MiniButton = new GUIStyle("miniButton");
        public static AssetBundleToolsUI ins = null;

        private Rect ContentRect
        {
            get => new Rect(0, ASMainWindow.Instance.ModeTabRect.yMax,
                ASMainWindow.Instance.position.width, ASMainWindow.Instance.position.height - ASMainWindow.Instance.ModeTabRect.yMax);
        }

        private Rect ABRect
        {
            get => new Rect(ContentRect.xMin, ContentRect.yMin, splitPos - 2, ContentRect.height);
        }

        private Rect DetailsRect
        {
            get => new Rect(ABRect.xMax + 4, ContentRect.yMin, ContentRect.xMax - ABRect.xMax - 4, ContentRect.height);
        }

        private Rect ABToolbarRect
        {
            get => new Rect(ABRect.xMin, ABRect.yMin, ABRect.width, 20f);
        }

        private Rect ABTreeViewRect
        {
            get => new Rect(ABRect.xMin, ABToolbarRect.yMax, ABRect.width, ABRect.height - ABToolbarRect.height);
        }

        private Rect DetailsToolbarRect
        {
            get => new Rect(DetailsRect.xMin, DetailsRect.yMin, DetailsRect.width, 20f);
        }

        private Rect DetailsTreeViewRect
        {
            get => new Rect(DetailsRect.xMin, DetailsToolbarRect.yMax, DetailsRect.width, DetailsRect.height - DetailsToolbarRect.height);
        }

        private bool dragging;
        private float splitPos;

        AssetBundleTreeView mABTreeView;
        TreeViewState mABTreeViewState;
        MultiColumnHeaderState mABColumnHeaderState;
        bool mABTreeViewInited;

        ABObjsTreeView mObjsTreeView;
        TreeViewState mObjsTreeViewState;
        MultiColumnHeaderState mObjsColumnHeaderState;
        bool mObjsTreeViewInited;

        ABAssetsTreeView mAssetsTreeView;
        TreeViewState mAssetsTreeViewState;
        MultiColumnHeaderState mAssetsColumnHeaderState;
        bool mAssetsTreeViewInited;

        ABDepTreeView mDepTreeView;
        TreeViewState mDepTreeViewState;
        MultiColumnHeaderState mDepColumnHeaderState;
        bool mDepTreeViewInited;

        enum DetailsMode
        {
            ObjectsList = 0,
            AssetsList,
            DependenciesList
        }
        DetailsMode mDetailsMode;

        public AssetBundleToolsUI()
        {
            ins = this;
            splitPos = ContentRect.width * 0.35f;

            mSearchField = new SearchField();
            CreateEmptyData();
        }

        void CreateEmptyData()
        {
            mAssetBundles = new List<ABTreeDataItem>();
            var abRoot = new ABTreeDataItem("Root", -1, 0);
            mAssetBundles.Add(abRoot);
            mNameToABDataItem = new Dictionary<string, ABTreeDataItem>();

            mABObjsList = new List<List<ABObjDataItem>>();
            var abObjs = new List<ABObjDataItem>();
            var objRoot = new ABObjDataItem("Root", -1, 0);
            abObjs.Add(objRoot);
            mABObjsList.Add(abObjs);

            mABAssetsList = new List<List<ABAssetDataItem>>();
            var abAssets = new List<ABAssetDataItem>();
            var assetRoot = new ABAssetDataItem("Root", -1, 0);
            abAssets.Add(assetRoot);
            mABAssetsList.Add(abAssets);

            var abDeps = new List<ABDepDataItem>();
            var depRoot = new ABDepDataItem("Root", -1, 0);
            abDeps.Add(depRoot);
            mAssetBundles[0].allDepABDataItems = abDeps;
        }

        void Init()
        {
            if (!mABTreeViewInited)
            {
                if (mABTreeViewState == null)
                    mABTreeViewState = new TreeViewState();
                bool firstInit = (mABColumnHeaderState == null);

                mABColumnHeaderState = AssetBundleTreeView.CreateDefaultMultiColumnHeaderState(ABTreeViewRect.width);
                var multiColumnHeader = new ASMultiColumnHeader(mABColumnHeaderState);
                if (firstInit)
                    multiColumnHeader.ResizeToFit();

                var treeModel = new TreeModelT<ABTreeDataItem>(mAssetBundles);
                mABTreeView = new AssetBundleTreeView(mABTreeViewState, multiColumnHeader, treeModel);

                mABTreeView.mSelectionChanged = (ids) =>
                {
                    mObjsTreeViewInited = false;
                    mAssetsTreeViewInited = false;
                    mDepTreeViewInited = false;
                };

                mABTreeViewInited = true;
            }

            var abIds = mABTreeView.GetSelection();
            int abId = abIds.Count == 1 ? abIds[0] : 0;
            if (abId >= mABObjsList.Count || abId >= mABAssetsList.Count)
                abId = 0;

            if (!mObjsTreeViewInited)
            {
                mABObjs = mABObjsList[abId];

                if (mObjsTreeViewState == null)
                    mObjsTreeViewState = new TreeViewState();
                bool firstInit = (mObjsColumnHeaderState == null);

                mObjsColumnHeaderState = ABObjsTreeView.CreateDefaultMultiColumnHeaderState(DetailsTreeViewRect.width);
                var multiColumnHeader = new ASMultiColumnHeader(mObjsColumnHeaderState);
                if (firstInit)
                    multiColumnHeader.ResizeToFit();

                var treeModel = new TreeModelT<ABObjDataItem>(mABObjs);
                mObjsTreeView = new ABObjsTreeView(mObjsTreeViewState, multiColumnHeader, treeModel);
                mObjsTreeView.searchString = mABTreeView.searchString;

                mObjsTreeViewInited = true;
            }

            if (!mAssetsTreeViewInited)
            {
                mABAssets = mABAssetsList[abId];

                if (mAssetsTreeViewState == null)
                    mAssetsTreeViewState = new TreeViewState();
                bool firstInit = (mAssetsColumnHeaderState == null);

                mAssetsColumnHeaderState = ABAssetsTreeView.CreateDefaultMultiColumnHeaderState(DetailsTreeViewRect.width);
                var multiColumnHeader = new ASMultiColumnHeader(mAssetsColumnHeaderState);
                if (firstInit)
                    multiColumnHeader.ResizeToFit();

                var treeModel = new TreeModelT<ABAssetDataItem>(mABAssets);
                mAssetsTreeView = new ABAssetsTreeView(mAssetsTreeViewState, multiColumnHeader, treeModel);

                mAssetsTreeViewInited = true;
            }

            if (!mDepTreeViewInited)
            {
                mABDeps = mAssetBundles[abId].allDepABDataItems;

                if (mDepTreeViewState == null)
                    mDepTreeViewState = new TreeViewState();
                bool firstInit = (mDepColumnHeaderState == null);

                mDepColumnHeaderState = ABDepTreeView.CreateDefaultMultiColumnHeaderState(DetailsTreeViewRect.width);
                var multiColumnHeader = new ASMultiColumnHeader(mDepColumnHeaderState);
                if (firstInit)
                    multiColumnHeader.ResizeToFit();

                var treeModel = new TreeModelT<ABDepDataItem>(mABDeps);
                mDepTreeView = new ABDepTreeView(mDepTreeViewState, multiColumnHeader, treeModel);

                mDepTreeViewInited = true;
            }
        }

        internal void UnloadAllAssetBundles()
        {
            foreach (var abItem in mAssetBundles)
            {
                if (abItem.ab != null)
                    abItem.ab.Unload(true);
            }
        }

        static byte[] kAssetBundleSig = new byte[] {(byte)'U', (byte)'n', (byte)'i', (byte)'t', (byte)'y', (byte)'F', (byte)'S' };
        static bool IsAssetBundle(string path)
        {
            using(Stream source = File.OpenRead(path)) {
                byte[] buffer = new byte[7];
                int bytesRead = source.Read(buffer, 0, buffer.Length);
                if (bytesRead != buffer.Length)
                    return false;

                return buffer.SequenceEqual(kAssetBundleSig);
            }
        }


#if ASSETBUNDLE_TOOL
        void OpenAssetBundles()
        {
            var abFolder = EditorUtility.OpenFolderPanel("Select AssetBundle folder", Application.dataPath, string.Empty);
            if (!string.IsNullOrEmpty(abFolder))
            {
                UnloadAllAssetBundles();

                MonoBehaviour.EnableScriptReloadInCheckConsistency(false);

                CreateEmptyData();

                var filePaths = Directory.GetFiles(abFolder, "*.*", SearchOption.AllDirectories);
                for (int iFile = 0; iFile < filePaths.Length; ++iFile)
                {
                    var filePath = filePaths[iFile];
                    if (filePath.EndsWith(".meta") || filePath.EndsWith(".manifest"))
                        continue;
                    if (!IsAssetBundle(filePath))
                        continue;

                    var ab = AssetBundle.LoadFromFile(filePath);
                    if (ab != null)
                    {
                        EditorUtility.DisplayProgressBar("Open AssetBundles",
                            string.Format("Loading {0} {1}/{2}", filePath, iFile, filePaths.Length),
                            (iFile * 1.0f) / filePaths.Length);

                        if (ab.Contains("AssetBundleManifest"))
                        {
                            Debug.Log("AssetBundleManifest found in " + filePath);
                            if (mAssetBundleManifest != null)
                                Debug.LogError("More than one AssetBundleManifest found!");
                            mAssetBundleManifest = ab.LoadAsset("AssetBundleManifest") as AssetBundleManifest;
                        }

                        // ab tree
                        var abDataItem = new ABTreeDataItem(ab.name, 0, mAssetBundles.Count);
                        abDataItem.ab = ab;
                        abDataItem.abPath = filePath;
                        abDataItem.abSize = (int)(new FileInfo(filePath).Length);
                        mAssetBundles.Add(abDataItem);
                        mNameToABDataItem[ab.name] = abDataItem;

                        // asset tree
                        var abAssets = new List<ABAssetDataItem>();
                        var assetRoot = new ABAssetDataItem("Root", -1, 0);
                        abAssets.Add(assetRoot);

                        int[] assetInsIds = ab.GetAssetInstanceIds();
                        string[] assetPaths = ab.GetAssetPaths();
                        for (int iAsset = 0; iAsset < assetInsIds.Length; ++iAsset)
                        {
                            var assetItem = new ABAssetDataItem(assetPaths[iAsset], 0, abAssets.Count);
                            assetItem.instanceId = assetInsIds[iAsset];
                            abAssets.Add(assetItem);
                        }
                        mABAssetsList.Add(abAssets);

                        // obj tree
                        var abObjs = new List<ABObjDataItem>();
                        var objRoot = new ABObjDataItem("Root", -1, 0);
                        abObjs.Add(objRoot);

                        ab.LoadEmbeddedObjectsInfo();
                        int[] objInsIds = ab.GetEmbeddedInstanceIds();
                        long[] objLocalIds = ab.GetEmbeddedObjectLocalFileIds();
                        int[] objPersistentTypeIds = ab.GetEmbeddedObjectPersistentTypeIds();
                        int[] objLengths = ab.GetEmbeddedObjectLengths();
                        int[] objCompressSize = ab.GetEmbeddedObjectCompressedSize();
                        int[] objAssetIndex = ab.GetEmbeddedObjectAssetIndex();

                        for (int iObj = 0; iObj < objInsIds.Length; ++iObj)
                        {
                            var objInsId = objInsIds[iObj];
                            string typeName = AssetBundle.GetTypeName(objPersistentTypeIds[iObj]);
                            string name;
                            if (objInsId != 0)
                            {
                                var obj = EditorUtility.InstanceIDToObject(objInsId);
                                name = obj != null ? obj.name : "null";
                            }
                            else
                                name = string.Format("{0}(Count: {1})", typeName, objLocalIds[iObj]);

                            var objItem = new ABObjDataItem(name, 0, abObjs.Count);
                            objItem.objInstanceId = objInsId;
                            objItem.objType = typeName;
                            objItem.objSize = objLengths[iObj];
                            objItem.objCompressSize = objCompressSize[iObj];
                            if (objAssetIndex[iObj] >= 0 && objAssetIndex[iObj] < assetPaths.Length)
                                objItem.assetPath = assetPaths[objAssetIndex[iObj]];
                            abObjs.Add(objItem);
                        }
                        mABObjsList.Add(abObjs);
                    }
                }

                if (mAssetBundleManifest == null)
                    Debug.LogError("AssetBundleManifest not found!");

                for (int iAB = 1; iAB < mAssetBundles.Count; ++iAB)
                {
                    var abDataItem = mAssetBundles[iAB];
                    FillDirectDependencies(abDataItem);
                }

                for (int iAB = 1; iAB < mAssetBundles.Count; ++iAB)
                {
                    var abDataItem = mAssetBundles[iAB];
                    SearchDependenciesRecursively(abDataItem);
                }
                UpdateAllDependencyInfoOfDepDataItem();

                EditorUtility.ClearProgressBar();

                MonoBehaviour.EnableScriptReloadInCheckConsistency(true);
                mABTreeViewInited = false;
                mObjsTreeViewInited = false;
                mAssetsTreeViewInited = false;
                mDepTreeViewInited = false;
            }
        }

        void FillDirectDependencies(ABTreeDataItem abDataItem)
        {
            if (abDataItem.ab == null)
                return;

            // If we have AssetBundleManifest, we'll use the dependency info in AssetBundleManifest.
            if (mAssetBundleManifest != null)
                abDataItem.depABs.AddRange(mAssetBundleManifest.GetDirectDependencies(abDataItem.ab.name));
            else
                abDataItem.depABs.AddRange(abDataItem.ab.GetDependencies());

            if (abDataItem.depABs.Contains(abDataItem.ab.name))
                abDataItem.depABs.Remove(abDataItem.ab.name);
        }
#endif

        void SearchDependenciesRecursively(ABTreeDataItem abDataItem)
        {
            int itemId = 0;
            int depth = -1;
            HashSet<string> depNameSet = new HashSet<string>();

            var invisibleDepRoot = new ABDepDataItem(abDataItem.ab.name, depth++, itemId++);
            depNameSet.Add(invisibleDepRoot.abName);

            List<ABDepDataItem> lastLayer = new List<ABDepDataItem>();
            lastLayer.Add(invisibleDepRoot);
            while (lastLayer.Count > 0)
            {
                List<ABDepDataItem> curLayer = new List<ABDepDataItem>();
                foreach (var parent in lastLayer)
                {
                    if (!mNameToABDataItem.ContainsKey(parent.abName))
                        continue;

                    var parentABDataItem = mNameToABDataItem[parent.abName];
                    parent.abSize = parentABDataItem.abSize;
                    parent.Children = new List<TreeDataItem>();

                    abDataItem.totalDepSize += parent.abSize;
                    ++parentABDataItem.reverseDepCount;

                    foreach (var depABName in parentABDataItem.depABs)
                    {
                        if (depNameSet.Contains(depABName))
                            continue;
                        depNameSet.Add(depABName);

                        var depItem = new ABDepDataItem(depABName, depth, itemId++);
                        parent.Children.Add(depItem);
                        curLayer.Add(depItem);
                    }
                }

                lastLayer = curLayer;
                ++depth;
            }

            abDataItem.allDepABDataItems = new List<ABDepDataItem>();
            TreeElementUtility.TreeToList(invisibleDepRoot, abDataItem.allDepABDataItems);
        }

        void UpdateAllDependencyInfoOfDepDataItem()
        {
            for (int iAB = 1; iAB < mAssetBundles.Count; ++iAB)
            {
                var abDataItem = mAssetBundles[iAB];
                foreach (var depDataItem in abDataItem.allDepABDataItems)
                {
                    if (!mNameToABDataItem.ContainsKey(depDataItem.abName))
                        continue;

                    depDataItem.allDepSize = mNameToABDataItem[depDataItem.abName].totalDepSize;
                    depDataItem.allDepCount = mNameToABDataItem[depDataItem.abName].allDepABDataItems.Count;
                }
            }
        }

        void OnSplitEvents()
        {
            Rect splitRect = new Rect(splitPos - 2, ContentRect.y, 4, ContentRect.height);
            // EditorGUI.DrawRect(splitRect, Color.black);
            EditorGUIUtility.AddCursorRect(splitRect, MouseCursor.ResizeHorizontal);
            if (Event.current != null)
            {
                switch (Event.current.rawType)
                {
                    case EventType.MouseDown:
                        if (splitRect.Contains(Event.current.mousePosition))
                        {
                            dragging = true;
                        }
                        break;
                    case EventType.MouseDrag:
                        if (dragging)
                        {
                            splitPos += Event.current.delta.x;
                            ASMainWindow.Instance.Repaint();
                        }
                        break;
                    case EventType.MouseUp:
                        if (dragging)
                        {
                            dragging = false;
                        }
                        break;
                }
            }
        }

        public void OnGUI()
        {
            Init();
            OnSplitEvents();
            OnABGUI();
            OnDetailsGUI();
        }

        public void OnABGUI()
        {
            OnABToolbarGUI(ABToolbarRect);
            mABTreeView.OnGUI(ABTreeViewRect);
        }

        public void OnABToolbarGUI(Rect rect)
        {
            GUILayout.BeginArea(rect);
            using (new EditorGUILayout.HorizontalScope())
            {
                GUILayout.Space(5);

                if (GUILayout.Button("Load ABs", s_MiniButton, GUILayout.Width(70)))
                {
#if ASSETBUNDLE_TOOL
                    OpenAssetBundles();
#else
                    if (!EditorUtility.DisplayDialog("AssetBundle Tool", "AssetBundle Tool is not supported by " + Application.unityVersion, "OK"))
                    {
                        return;
                    }
#endif
                }

                if (GUILayout.Button("Unload", s_MiniButton, GUILayout.Width(60)))
                {
                    UnloadAllAssetBundles();
                    CreateEmptyData();
                    mABTreeViewInited = false;
                    mObjsTreeViewInited = false;
                    mAssetsTreeViewInited = false;
                    mDepTreeViewInited = false;
                }

                GUILayout.Space(20);

                mABSearchMode1 = (ABSearchMode1)EditorGUILayout.Popup((int)mABSearchMode1, new string[]
                    {
                        "ABName",
                        "Assets",
                        "Dependencies"
                    },
                    GUILayout.MaxWidth(30));
                mABSearchMode2 = (ABSearchMode2)EditorGUILayout.Popup((int)mABSearchMode2, new string[]
                    {
                        "Match",
                        "Contains"
                    },
                    GUILayout.MaxWidth(30));
                mABTreeView.searchString = mSearchField.OnToolbarGUI(mABTreeView.searchString, GUILayout.Width(120));

                GUILayout.FlexibleSpace();

                int matchABCount = mABTreeView.GetRows().Count;
                int selectedABCount = mABTreeView.GetSelection().Count;
                string statusReport = string.Format("{0} selected / {1} match", selectedABCount, matchABCount);
                GUILayout.Label(statusReport);
            }
            GUILayout.EndArea();
        }

        public void OnDetailsGUI()
        {
            OnDetailsToolbarGUI(DetailsToolbarRect);
            switch (mDetailsMode)
            {
                case DetailsMode.ObjectsList:
                    mObjsTreeView.OnGUI(DetailsTreeViewRect);
                    break;
                case DetailsMode.AssetsList:
                    mAssetsTreeView.OnGUI(DetailsTreeViewRect);
                    break;
                case DetailsMode.DependenciesList:
                    mDepTreeView.OnGUI(DetailsTreeViewRect);
                    break;
            }
        }

        public void OnDetailsToolbarGUI(Rect rect)
        {
            GUILayout.BeginArea(rect);
            using (new EditorGUILayout.HorizontalScope())
            {
                GUILayout.Space(5);
                mDetailsMode = (DetailsMode)GUILayout.Toolbar((int)mDetailsMode,
                    new string[]
                    {
                        "Objects",
                        "Assets",
                        "Dependencies",
                    });
            }
            GUILayout.EndArea();
        }
    }
}

#endif  //  IG_C301 || IG_C302 || IG_C303 || TUANJIE_2022_3_OR_NEWER, Auto generated by AddMacroForInstantGameFiles.exe
