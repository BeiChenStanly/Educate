#if  IG_C301 || IG_C302 || IG_C303 || TUANJIE_2022_3_OR_NEWER // Auto generated by AddMacroForInstantGameFiles.exe

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using UnityEditor;
using UnityEngine;
using Unity.AutoStreaming.UosCdn;
using Tuple = System.Tuple;
using Unity.InstantGame;
using UnityEngine.Rendering;

namespace Unity.AutoStreaming
{
    internal class ASConfigUI
    {
        private const int lineSpace = 2;
        private Rect TabToolbarRect
        {
            get => new Rect(0, ASMainWindow.Instance.ModeTabRect.yMax, ASMainWindow.Instance.position.width, 20f);
        }

        bool dragging;
        float splitPos;
        Vector2 m_StatsScrollPos;

        private SimpleBucket[] m_Buckets;
        private string[] m_BucketNames = null;

        private SimpleBadge[] m_Badges;
        private string[] m_BadgeNames = null;

        private string m_UosAppId = string.Empty;
        private string m_UosAppSecret = string.Empty;
        //init with empty string, may cause null references exception otherwise
        private string m_TtAppid = string.Empty;
        private bool m_NeedRefresh;
        private bool m_ProjectChanged = true;

        private int m_SelectedBucketIndex = 0;
        private int m_SelectedBadgeIndex = 0;

        private bool m_selectedBadgeLocked = false;

        private string m_SelectedBucketName = string.Empty; //init with empty string, may cause null references exception otherwise
        private string m_SelectedBadgeName = string.Empty; //init with empty string, may cause null references exception otherwise

        private const int k_Padding = 10;
        private const int k_SpaceHeight = 10;

        static readonly GUIContent k_UseASGUIContent = new GUIContent("Use AutoStreaming", "Whether to enable Auto Streaming.");
        static readonly GUIContent k_CacheTextureAB = new GUIContent("Cache Texture AB in Memory", "Enable this will get a better visual experience but use much more memory.");

        static readonly GUIContent k_UosAppIdUIContent = new GUIContent("UOS App ID", "A string named UOS App ID provided by Unity Online Service.");
        static readonly GUIContent k_UosAppSecretUIContent = new GUIContent("UOS App Service Secret", "A string named UOS App Service Secret provided by Unity Online Service.");
        static readonly GUIContent k_TtAppIdUIContent = new GUIContent("ByteDance Appid", "(Optional) A string named Appid request from bytedance.");
        static readonly GUIContent k_MaxConcurrentLoadContent = new GUIContent("Max Cocurrent Load", "Max allowed background cocurrent load job for streaming assets. Valid values are 0 to 20, 0 to use default value.");
        static readonly GUIContent k_MaxCacheSizeContent = new GUIContent("Max Cache Size(MB)", "Max allowed cache size for streaming assets. Set this value to 0 if you do not want to use it.");
        static readonly GUIContent k_IgbuildAndUploadUIContent = new GUIContent("Build & Upload", "Build the project in Instant Game way and upload to UOS");
        static readonly GUIContent k_BucketUIContent = new GUIContent("Bucket to Use", "Bucket to be used in both build and upload.");
        static readonly GUIContent k_BadgeUIContent = new GUIContent("Badge to Use", "Badge to be used in both build and upload.");
        static readonly GUIContent k_ASIdUIContent = new GUIContent("Auto Streaming Path", "Path to be used for streaming assets, which is combined from the bucket id and badge name.");
        static readonly GUIContent k_CustomABUIContent = new GUIContent("Custom AB Assets", "(Optional) A text file list all assets path included in custom AssetBundle building map, with the first line as the assets count.");
        static readonly GUIContent k_UploadUIContent = new GUIContent("Upload to UOS CDN", "Please make sure all above settings are the same with last build, otherwise rebuild the project before uploading.");
        static readonly GUIContent k_FontUIContent = new GUIContent("Use Font Streaming (Experimental)", "Font Streaming is an experimental feature. It's not stable in some case.");
        static readonly GUIContent k_NewButton = new GUIContent("New");
        static readonly GUIContent k_LockButton = new GUIContent("Lock", "Lock this badge to protect it from being overwritten");
        static readonly GUIContent k_UnlockButton = new GUIContent("Unlock", "Unlock this badge for writing");
        static readonly GUIContent k_InstantGameStatsLabel = new GUIContent("Instant Game Build Results:", "Stats about Instant Game build files on disk.");

        static readonly GUIContent k_InstantGameWarningsLabel = new GUIContent("Instant Game Build Warnings:", "Warnings about building Instant Game App.");

        static readonly GUIContent k_ClearCloudAssetButton = new GUIContent("Clear Cloud Assets", "Clear all cloud asset files");
        static readonly string k_CloudAssetInfoFormat = "{0}:  {1}  ({2}: {3}    {4}: {5}    {6}: {7}    {8}: {9}    {10}: {11}    {12}: {13}    {14}: {15})";

        static readonly GUIStyle k_HelpBoxStyle = null;

        private bool m_UOSInitialized = false;

        public event Action<List<System.Tuple<ASResourceType, string>>> BeforeUOSUpload;

        // Callbacks for instant game UI extension to register.
        public event Action OnBuildInstantGameGUI;
        public event Action OnConfigMiniGamePlatformGUI;
        public event Action OnInstantGameStatsGUI;
        public event Action OnQRCodeGUI;


        public delegate bool BuildFunc(bool showBuiltPlayer);
        public event BuildFunc BuildInstantGame;
        public event Action OnUOSInstantIdChanged;

        private object m_UIExtention = null;

        private int m_WarningCount = 1;

        static ASConfigUI()
        {
            k_HelpBoxStyle = new GUIStyle(EditorStyles.helpBox);
            k_HelpBoxStyle.fontSize = 12;
        }

        public ASConfigUI()
        {
            splitPos = TabToolbarRect.width / 2;
            m_UIExtention = new IGConfigUIExtension(this);
#if UNITY_ANDROID
            IGStartupFiles.RefreshInfo();
#endif
            StreamingFiles.RefreshInfo();
        }

        public void OnGUI()
        {
            OnToolbarGUI(TabToolbarRect);
            OnConfigUI(TabToolbarRect);
            var statsRect = OnStatsUI(TabToolbarRect);
            OnSplitEvents(TabToolbarRect);
            OnIgWarningsGUI(TabToolbarRect, statsRect);
        }

        public void OnConfigGUI()
        {
            InitUOS();

            GUILayout.BeginVertical();

            GUILayout.Space(k_SpaceHeight);

            // Experimental font streaming.
            GUILayout.BeginHorizontal();
            GUILayout.Space(k_Padding);
            PlayerSettings.fontStreaming = EditorGUILayout.ToggleLeft(k_FontUIContent, PlayerSettings.fontStreaming, GUILayout.Width(240));
#if UNITY_WEBGL && (IG_C301 || IG_C302 || IG_C303 || TUANJIE_2022_3_OR_NEWER)
            PlayerSettings.cacheASTextureAB = EditorGUILayout.ToggleLeft(k_CacheTextureAB, PlayerSettings.cacheASTextureAB, GUILayout.Width(200));
#endif
            GUILayout.Space(k_Padding);
            GUILayout.EndHorizontal();

            GUILayout.Space(k_SpaceHeight);

            // Custom search.
            GUILayout.BeginHorizontal();
            GUILayout.Space(k_Padding);
            OnCustomSearchFilterGUI();
            GUILayout.Space(k_Padding);
            GUILayout.EndHorizontal();

            GUILayout.Space(k_SpaceHeight);

            // Draw auto streaming id.
            GUILayout.BeginHorizontal();
            GUILayout.Space(k_Padding);
            EditorGUILayout.LabelField(k_ASIdUIContent, GUILayout.Width(149));
            EditorGUILayout.SelectableLabel(ASUOSHelper.AutoStreamingPath, k_HelpBoxStyle, GUILayout.Height(20));
            if (GUILayout.Button("Copy", GUILayout.Width(65)))
                GUIUtility.systemCopyBuffer = ASUOSHelper.AutoStreamingPath;
            GUILayout.Space(k_Padding);
            GUILayout.EndHorizontal();

            GUILayout.Space(k_SpaceHeight);

            // Draw InstantGame AppId.
            GUILayout.BeginHorizontal();
            GUILayout.Space(k_Padding);

            OnUOSAppIdGUI();

            GUILayout.Space(k_Padding);
            GUILayout.EndHorizontal();

            GUILayout.Space(k_SpaceHeight);

            // Draw bucket.
            GUILayout.BeginHorizontal();
            GUILayout.Space(k_Padding);
            OnBucketGUI();
            GUILayout.Space(k_Padding);
            GUILayout.EndHorizontal();

            GUILayout.Space(k_SpaceHeight);

            // Draw badge.
            GUILayout.BeginHorizontal();
            GUILayout.Space(k_Padding);
            OnBadgeGUI();
            GUILayout.Space(k_Padding);
            GUILayout.EndHorizontal();

            GUILayout.Space(k_SpaceHeight);


            // Draw build and upload buttons.
            OnInstantGameBuildGUI();

            EditorGUILayout.EndToggleGroup();

            GUILayout.EndVertical();
        }

        private void OnToolbarGUI(Rect toolbarRect)
        {
            GUILayout.BeginArea(toolbarRect);
            using (new EditorGUILayout.HorizontalScope())
            {
                GUILayout.Space(5);
                var useAutoStreaming = EditorGUILayout.BeginToggleGroup(k_UseASGUIContent, PlayerSettings.autoStreaming);
                if (PlayerSettings.autoStreaming != useAutoStreaming)
                {
                    PlayerSettings.autoStreaming = useAutoStreaming;
#if UNITY_ADDRESSABLES
                    if (!useAutoStreaming)
                        AddressableSpriteAtlasUtils.ReplaceAdressableSpriteAtlas(false);
#endif
                }
            }
            GUILayout.EndArea();
        }

        private void OnConfigUI(Rect toolbarRect)
        {
            var leftRect = new Rect(toolbarRect.x, toolbarRect.yMax, splitPos, ASMainWindow.Instance.position.height - toolbarRect.yMax);
            GUILayout.BeginArea(leftRect);
            OnConfigGUI();
            GUILayout.EndArea();
        }

        private Rect OnStatsUI(Rect toolbarRect)
        {
            var statsRect = new Rect(splitPos, toolbarRect.yMax, ASMainWindow.Instance.position.width - splitPos, (ASMainWindow.Instance.position.height - toolbarRect.yMax) / 6);
            GUILayout.BeginArea(new Rect(statsRect.x + 2, statsRect.y + 2, statsRect.width - 2, statsRect.height - 2));
            m_StatsScrollPos = EditorGUILayout.BeginScrollView(m_StatsScrollPos);
            OnStatsGUI();
            EditorGUILayout.EndScrollView();
            GUILayout.EndArea();

            return statsRect;
        }

        void OnSplitEvents(Rect toolbarRect)
        {
            var splitRect = new Rect(splitPos - 1, toolbarRect.yMax, 2, ASMainWindow.Instance.position.height - toolbarRect.yMax);
            EditorGUI.DrawRect(splitRect, Color.black);
            EditorGUIUtility.AddCursorRect(splitRect, MouseCursor.ResizeHorizontal);
            if (Event.current != null)
            {
                switch (Event.current.rawType)
                {
                    case EventType.MouseDown:
                        if (splitRect.Contains(Event.current.mousePosition))
                        {
                            dragging = true;
                        }
                        break;
                    case EventType.MouseDrag:
                        if (dragging)
                        {
                            splitPos += Event.current.delta.x;
                            ASMainWindow.Instance.Repaint();
                        }
                        break;
                    case EventType.MouseUp:
                        if (dragging)
                        {
                            dragging = false;
                        }
                        break;
                }
            }
        }

        internal void InitUOS()
        {
            if (m_UOSInitialized)
                return;


            m_UosAppId = ASUOSHelper.UosAppId;
            m_UosAppSecret = ASUOSHelper.UosAppSecret;

            m_BucketNames = new string[1];
            m_BucketNames[0] = "No Bucket";

            m_BadgeNames = new string[1];
            m_BadgeNames[0] = "No Badge";


            // We only want to query from UOS if autostreaming is enabled.
            if (!PlayerSettings.autoStreaming)
            {
                return;
            }

            m_TtAppid = ASUOSHelper.TtAppid;
            ByteDanceVersions.FetchByteDanceVersions(ASUOSHelper.TtAppid);

            if (RefreshProjectInfo())
            {
                RefreshBucketsInfo(ASUOSHelper.BucketName);
                RefreshBadgesInfo(ASUOSHelper.BadgeName);
            }
            m_UOSInitialized = true;
        }

        void OnUOSAppIdGUI()
        {
            GUILayout.BeginVertical();

            // Draw AppId key.
            GUILayout.BeginHorizontal();
            m_UosAppId = EditorGUILayout.TextField(k_UosAppIdUIContent, m_UosAppId).Trim();
            GUILayout.Space(k_Padding);
            m_UosAppSecret = EditorGUILayout.TextField(k_UosAppSecretUIContent, m_UosAppSecret).Trim();

            if (string.IsNullOrEmpty(m_UosAppId) || string.IsNullOrEmpty(m_UosAppSecret) || m_UosAppId.Length != 36)
            {
                if (GUILayout.Button("To UOS Website", GUILayout.Width(135)))
                {
                    Application.OpenURL("https://uos.unity.cn/");
                }
            }
            GUILayout.EndHorizontal();

            if (!m_UosAppId.Equals(ASUOSHelper.UosAppId) || !m_UosAppSecret.Equals(ASUOSHelper.UosAppSecret))
            {
                ASUOSHelper.UosAppId = m_UosAppId;
                ASUOSHelper.UosAppSecret = m_UosAppSecret;

                m_NeedRefresh = true;
            }

            // Draw UOS hints if necessary.
            if (string.IsNullOrEmpty(m_UosAppId) || string.IsNullOrEmpty(m_UosAppSecret) || m_UosAppId.Length != 36)
            {
                GUILayout.Space(k_SpaceHeight);

                EditorGUILayout.HelpBox("UOS App Id / Secret is empty or invalid, please fill it with value from UOS Website.", MessageType.Error);
            }
            else if (m_NeedRefresh)
            {
                GUILayout.Space(k_SpaceHeight);
                EditorGUILayout.HelpBox("UOS App Id / Secret was changed, please click refresh button before use.", MessageType.Error);
            }

            if (ASUOSHelper.TargetPlatform == "Bytedance")
            {
                GUILayout.Space(k_Padding);
                OnTtAppidGUI();
            }
#if !IG_C106 && UNITY_ANDROID
            GUILayout.Space(k_SpaceHeight);
            PlayerSettings.maxCacheSize = EditorGUILayout.IntField(k_MaxCacheSizeContent, Math.Max(PlayerSettings.maxCacheSize, 0));
#endif

#if IG_C302 || IG_C303 || TUANJIE_2022_3_OR_NEWER
            GUILayout.Space(k_SpaceHeight);
            PlayerSettings.maxConcurrentLoad = EditorGUILayout.IntField(k_MaxConcurrentLoadContent, Math.Clamp(PlayerSettings.maxConcurrentLoad, 0, 20));
#endif
            GUILayout.EndVertical();
        }

        void OnTtAppidGUI()
        {
            m_TtAppid = EditorGUILayout.TextField(k_TtAppIdUIContent, m_TtAppid).Trim();
            if (!m_TtAppid.Equals(ASUOSHelper.TtAppid))
            {
                ASUOSHelper.TtAppid = m_TtAppid;
                if (!string.IsNullOrEmpty(ASUOSHelper.TtAppid) && m_TtAppid.StartsWith("tt"))
                {
                    ByteDanceVersions.FetchByteDanceVersions(ASUOSHelper.TtAppid);
                    RefreshBadgesInfo(ASUOSHelper.BadgeName);
                }
            }

            if (string.IsNullOrEmpty(ASUOSHelper.TtAppid) || !m_TtAppid.StartsWith("tt"))
            {
                GUILayout.Space(k_SpaceHeight);
                EditorGUILayout.HelpBox("(Optional) Appid is empty or invalid, please fill it with value provided by bytedance to show your online badge versions.", MessageType.Warning);
            }
        }

        bool RefreshProjectInfo()
        {
            EditorUtility.DisplayProgressBar("AutoStreaming CDN", "Refresh UOS App", 0.1f);
            Project project = ASUOSHelper.LoadProject();
            EditorUtility.ClearProgressBar();

            if (project != null)
            {
                if (!project.Status)
                {
                    if (EditorUtility.DisplayDialog("UOS CDN Service", "UOS CDN Service not open. Would you like to open UOS CDN Service now?", "Yes", "No"))
                    {
                        Application.OpenURL("https://uos.unity.cn/");
                    }
                }
                return project.Status;
            }
            return false;
        }

        void UpdateAutoStreamingID()
        {
#if IG_C106
            PlayerSettings.autoStreamingId = string.Format("/v1/buckets/{0}/release_by_badge/{1}/content/AS%252F", ASUOSHelper.BucketUuid, ASUOSHelper.BadgeName);
#else
            PlayerSettings.autoStreamingId = string.Format("/v1/buckets/{0}/release_by_badge/{1}/content", ASUOSHelper.BucketUuid, ASUOSHelper.BadgeName);
#endif
        }

        void OnBucketGUI()
        {
            m_SelectedBucketIndex = EditorGUILayout.Popup(k_BucketUIContent, m_SelectedBucketIndex, m_BucketNames);
            m_SelectedBucketName = (m_Buckets != null && m_SelectedBucketIndex < m_Buckets.Length) ? m_Buckets[m_SelectedBucketIndex].Name : "";

            if (m_UOSInitialized && (!m_SelectedBucketName.Equals(ASUOSHelper.BucketName) || m_ProjectChanged))
            {
                m_ProjectChanged = false;
                ASUOSHelper.BucketName = m_SelectedBucketName;
                ASUOSHelper.BucketUuid = (m_Buckets != null && m_SelectedBucketIndex < m_Buckets.Length) ? m_Buckets[m_SelectedBucketIndex].Id : "";
                UpdateAutoStreamingID();
                OnUOSInstantIdChanged?.Invoke();
                RefreshBadgesInfo(ASUOSHelper.BadgeName); //selected BadgeName may changed if bucket changed
            }

            var bucketButtonRect = GUILayoutUtility.GetRect(k_NewButton, GUI.skin.button, GUILayout.Width(65));
            if (GUI.Button(bucketButtonRect, k_NewButton))
            {
                bucketButtonRect.x -= 235;

                var bucketPopup = new CreateBucketPopup();
                bucketPopup.OnBucketCreated += RefreshBucketsInfo;
                PopupWindow.Show(bucketButtonRect, bucketPopup);
            }
            if (GUILayout.Button("Refresh", GUILayout.Width(65)))
            {
                if (RefreshProjectInfo())
                {
                    RefreshBucketsInfo(ASUOSHelper.BucketName);
                    m_NeedRefresh = false;
                    m_ProjectChanged = true;
                }
            }
        }

        void RefreshBucketsInfo(string selectedName)
        {
            EditorUtility.DisplayProgressBar("AutoStreaming CDN", "Refresh Buckets", 0.4f);
            m_SelectedBucketIndex = 0;

            m_Buckets = ASUOSHelper.LoadBuckets();
            if (m_Buckets == null || m_Buckets.Length == 0)
            {
                m_BucketNames = new string[1];
                m_BucketNames[0] = "No Bucket";
                EditorUtility.ClearProgressBar();
                return;
            }

            m_BucketNames = new string[m_Buckets.Length];
            for (int i = 0; i < m_Buckets.Length; i++)
            {
                m_BucketNames[i] = m_Buckets[i].Name;
                if (selectedName.Equals(m_Buckets[i].Name))
                {
                    m_SelectedBucketIndex = i;
                }
            }
            EditorUtility.ClearProgressBar();
        }

        void OnBadgeGUI()
        {
            m_SelectedBadgeIndex = EditorGUILayout.Popup(k_BadgeUIContent, m_SelectedBadgeIndex, m_BadgeNames);
            m_SelectedBadgeName = (m_Badges != null && m_SelectedBadgeIndex < m_Badges.Length) ? m_Badges[m_SelectedBadgeIndex].Name : "";
            m_selectedBadgeLocked = (m_Badges != null && m_SelectedBadgeIndex < m_Badges.Length) ? m_Badges[m_SelectedBadgeIndex].Locked : string.IsNullOrEmpty(ASUOSHelper.BucketName);
            if (m_UOSInitialized && !m_SelectedBadgeName.Equals(ASUOSHelper.BadgeName))
            {
                ASUOSHelper.BadgeName = m_SelectedBadgeName;
                UpdateAutoStreamingID();
                OnUOSInstantIdChanged?.Invoke();
            }

            var badgeButtonRect = GUILayoutUtility.GetRect(k_NewButton, GUI.skin.button, GUILayout.Width(65));
            if (GUI.Button(badgeButtonRect, k_NewButton))
            {
                badgeButtonRect.x -= 235;

                var badgePopup = new CreateBadgePopup();
                badgePopup.OnBadgeCreated += RefreshBadgesInfo;
                PopupWindow.Show(badgeButtonRect, badgePopup);
            }

            EditorGUI.BeginDisabledGroup(string.IsNullOrEmpty(ASUOSHelper.BucketName));
            if (GUILayout.Button(m_selectedBadgeLocked ? k_UnlockButton : k_LockButton, GUILayout.Width(65)))
            {
                RefreshBadgesInfo(ASUOSHelper.BadgeName);
                ASUOSHelper.LockBadge(m_Badges[m_SelectedBadgeIndex].Name, m_Badges[m_SelectedBadgeIndex].ReleaseId, !m_selectedBadgeLocked);
                RefreshBadgesInfo(ASUOSHelper.BadgeName);
            }
            EditorGUI.EndDisabledGroup();
        }

        void RefreshBadgesInfo(string selectedName)
        {
            EditorUtility.DisplayProgressBar("AutoStreaming CDN", "Refresh Badges", 0.7f);
            m_SelectedBadgeIndex = 0;
            if (m_Buckets != null && m_SelectedBucketIndex < m_Buckets.Length)
            {
                var bucketid = m_Buckets[m_SelectedBucketIndex].Id;
                m_Badges = ASUOSHelper.LoadBadges();
                if (m_Badges != null && m_Badges.Length != 0)
                {
                    m_BadgeNames = new string[m_Badges.Length];
                    for (int i = 0; i < m_Badges.Length; i++)
                    {
                        m_BadgeNames[i] = m_Badges[i].Name;
                        bool needlock = ASUOSHelper.IsAnOnlineVersion(m_Badges[i].Name, out string tagStr);
                        if (!m_Badges[i].Locked && needlock)
                        {
                            ASUOSHelper.LockBadge(m_Badges[i].Name, m_Badges[i].ReleaseId, true);
                            m_Badges[i].Locked = true;
                        }

                        m_BadgeNames[i] = m_BadgeNames[i] + tagStr;
                        m_BadgeNames[i] = m_BadgeNames[i] + (m_Badges[i].Locked ? " (locked)" : "");

                        if (selectedName.Equals(m_Badges[i].Name))
                        {
                            m_SelectedBadgeIndex = i;
                        }
                    }
                    EditorUtility.ClearProgressBar();
                    return;
                }
                else
                {
                    m_Badges = new SimpleBadge[1];
                    m_Badges[0].Name = "latest";
                    m_Badges[0].ReleaseId = "";
                    m_BadgeNames = new string[1];
                    m_BadgeNames[0] = "latest"; // for new created bucket
                    EditorUtility.ClearProgressBar();
                    return;
                }
            }
            m_Badges = null;
            m_BadgeNames = new string[1];
            m_BadgeNames[0] = "No Badge";

            EditorUtility.ClearProgressBar();
        }

        void OnCustomSearchFilterGUI()
        {
            string oldFullPath = AutoStreamingSettings.GetCustomSearchFile();
            oldFullPath = string.IsNullOrWhiteSpace(oldFullPath) ? "" : Path.GetFullPath(oldFullPath);

            var inputPath = EditorGUILayout.TextField(k_CustomABUIContent, AutoStreamingSettings.GetCustomSearchFile());
            string inputFullPath = string.IsNullOrWhiteSpace(inputPath) ? "" : Path.GetFullPath(inputPath);

            if (!inputFullPath.Equals(oldFullPath) && (File.Exists(inputFullPath) || inputFullPath == ""))
                AutoStreamingSettings.SetCustomSearchFile(ASUtilities.GetRelativePathIfInProjectFolder(inputFullPath));

            if (GUILayout.Button("Browse", GUILayout.Width(65)))
            {
                string openDir = string.IsNullOrWhiteSpace(inputFullPath) ? ASUtilities.GetProjectRootPath() : Path.GetDirectoryName(inputFullPath);
                inputPath = EditorUtility.OpenFilePanel("Select custom resources search file", openDir, string.Empty);
                inputFullPath = string.IsNullOrWhiteSpace(inputPath) ? "" : Path.GetFullPath(inputPath);

                if (!string.IsNullOrWhiteSpace(inputFullPath))
                {
                    AutoStreamingSettings.SetCustomSearchFile(ASUtilities.GetRelativePathIfInProjectFolder(inputFullPath));
                    GUI.FocusControl(string.Empty);
                }
                GUIUtility.ExitGUI();
            }

            if (GUILayout.Button("Search AB", GUILayout.Width(80)))
            {
                var abFolder = EditorUtility.OpenFolderPanel("Select AssetBundle output folder", Application.dataPath, string.Empty);
                if (!string.IsNullOrEmpty(abFolder))
                {
                    ParseABManifest.DoParseFolder(abFolder);
                }
            }
        }

        void OnUploadGUI()
        {
            EditorGUI.BeginDisabledGroup(m_selectedBadgeLocked);
            if (GUILayout.Button(k_UploadUIContent))
            {
                UploadToUosGUI();
            }
            EditorGUI.EndDisabledGroup();
        }

        void UploadToUosGUI()
        {

            var toBeUploaded = new List<System.Tuple<ASResourceType, string>>();
            BeforeUOSUpload?.Invoke(toBeUploaded);
            UploadToUOS(toBeUploaded);
            RefreshBadgesInfo(ASUOSHelper.BadgeName);
        }

        internal static bool UploadToUOS()
        {
            var toBeUploaded = new List<System.Tuple<ASResourceType, string>>();
            return UploadToUOS(toBeUploaded);
        }

        static bool UploadToUOS(List<System.Tuple<ASResourceType, string>> toBeUploaded)
        {
            if (string.IsNullOrEmpty(ASUOSHelper.BucketUuid) || string.IsNullOrEmpty(ASUOSHelper.BucketName) || string.IsNullOrEmpty(ASUOSHelper.BadgeName))
            {
                EditorUtility.DisplayDialog("Upload Failed", "Please select a bucket/badge to use before upload to UOS CDN.", "OK");
                return false;
            }

            // The platform-specific build target directory needs to be consistent between the C++ side and
            // the C# side. Ideally there should be an API that allows the C# package to inform the engine
            // of the directory, but I don't know yet how important/generic that API would be, so for now we
            // have to keep the implicit protocol between the engine and the C# package, meaning we should
            // call GetBuildTargetUniqueName() in C++ and BuildPipeline.GetBuildTargetName() in C# for the
            // consistent directory.
            string buildTargetName = BuildPipeline.GetBuildTargetName(EditorUserBuildSettings.activeBuildTarget);

            toBeUploaded.Add(Tuple.Create(ASResourceType.StreamedResource, ASBuildConstants.k_TextureABPath + "/" + buildTargetName));
            toBeUploaded.Add(Tuple.Create(ASResourceType.StreamedResource, ASBuildConstants.k_SceneABPath + "/" + buildTargetName));
            toBeUploaded.Add(Tuple.Create(ASResourceType.StreamedResource, ASBuildConstants.k_MeshABPath));
            toBeUploaded.Add(Tuple.Create(ASResourceType.StreamedResource, ASBuildConstants.k_AudioABPath));
            toBeUploaded.Add(Tuple.Create(ASResourceType.StreamedResource, ASBuildConstants.k_AnimationABPath));
            toBeUploaded.Add(Tuple.Create(ASResourceType.StreamedResource, ASBuildConstants.k_FontABPath));
            toBeUploaded.Add(Tuple.Create(ASResourceType.CustomCloudAssets, ASBuildConstants.k_CustomCloudAssetsPath));
            toBeUploaded.Add(Tuple.Create(ASResourceType.AddressableAsset, ASBuildConstants.k_AddressabeAssetsPath));

            bool result = ASUOSHelper.SyncEntries(toBeUploaded);

            if (result)
            {
                string releaseId = ASUOSHelper.CreateRelease("Upload");
                ASUOSHelper.CreateOrUpdateBadge(ASUOSHelper.BadgeName, releaseId);

                Debug.Log("All files have been uploaded successfully to UOS CDN.");
                return true;
            }
            else
            {
                Debug.LogError("Some files failed to upload to UOS CDN, please go to 'Window -> AutoStreaming -> Cfg & Publish' panel and click 'Upload to UOS CDN' to upload them.");
                return false;
            }
        }

        void OnInstantGameBuildGUI()
        {
            GUILayout.BeginHorizontal();
            GUILayout.Space(k_Padding);
            OnConfigMiniGamePlatformGUI?.Invoke();
            GUILayout.Space(k_Padding);
            GUILayout.EndHorizontal();

            GUILayout.Space(k_Padding);
            GUILayout.BeginHorizontal();
            GUILayout.Space(k_Padding);
            OnBuildInstantGameGUI?.Invoke();
            OnUploadGUI();
            OnIgBuildAndUploadGUI();
            GUILayout.Space(k_Padding);
            GUILayout.EndHorizontal();

            OnLockedBadgeHintsGUI();
            GUILayout.Space(k_Padding);

            GUILayout.BeginHorizontal();
            GUILayout.Space(k_Padding);
            OnQRCodeGUI?.Invoke();
            GUILayout.EndHorizontal();
        }

        void OnIgBuildAndUploadGUI()
        {
            EditorGUI.BeginDisabledGroup(m_selectedBadgeLocked);
            if (GUILayout.Button(k_IgbuildAndUploadUIContent))
            {
                if (BuildInstantGame?.Invoke(false) == true)
                {
                    UploadToUosGUI();
#if UNITY_ANDROID
                    IGStartupFiles.RefreshInfo();
#endif
                    StreamingFiles.RefreshInfo();
                }
                GUIUtility.ExitGUI();
            }
            EditorGUI.EndDisabledGroup();
        }

        void OnIgWarningsGUI(Rect toolbarRect, Rect statsRect)
        {
            var warningsRect = new Rect(statsRect.xMin, statsRect.yMax, statsRect.width, (ASMainWindow.Instance.position.height - toolbarRect.height - statsRect.height));
            GUILayout.BeginArea(new Rect(warningsRect.x + 2, warningsRect.y + 2, warningsRect.width - 2, warningsRect.height - 2));
            m_StatsScrollPos = EditorGUILayout.BeginScrollView(m_StatsScrollPos);

            m_WarningCount = 1;

            GUILayout.BeginHorizontal();
            GUILayout.Space(k_Padding);
            EditorGUILayout.TextArea(k_InstantGameWarningsLabel.text, new GUIStyle
            {
                fontSize = 15,
                normal = new GUIStyleState { textColor = Color.yellow },
                wordWrap = true
            });
            GUILayout.EndHorizontal();

            GUILayout.BeginVertical();

            ShowWarningAboutSceneCount();

            ShowWarningsAboutBuildPlayerOptionsIfNeeded();

            ShowWarningsAboutSceneAbSize();

            ShowWarningsAboutFontAbSize();

#if UNITY_ANDROID
            ShowWarningsAboutFirstZips();
            ShowWarningsAboutArchitectureIfNeeded();
            ShowWarningsAboutBytedanceSdkVersionIfNeeded();
#endif

            ShowWarningsAboutTexturePlaceholder();

            GUILayout.EndVertical();

            EditorGUILayout.EndScrollView();
            GUILayout.EndArea();
        }

        void ShowWarningsAboutTexturePlaceholder()
        {
            var allTexsUsePlaceholder = AutoStreamingSettings.textures.Where(t => t.usePlaceholder);
            var numOfTexsUsePlaceholder = allTexsUsePlaceholder.Count();

            var existingPlaceholders = AutoStreamingSettings.GetExistingPlaceholders(true, true);
            var numOfExistingPlaceholders = existingPlaceholders.Length;

            if (numOfExistingPlaceholders < numOfTexsUsePlaceholder)
            {
                ShowWarning($"#{m_WarningCount++}: Placehodler(s) should be generated for some texture(s) which has/have been selected to use placeholder.");
            }
        }

        void ShowWarningAboutSceneCount()
        {
            if (!EditorBuildSettings.scenes.Where(s => s.enabled).Any())
            {
                ShowWarning($"#{m_WarningCount++}: No scene selected for building, please include at least 1 scene in build settings.");
            }
        }

        void ShowWarningsAboutBuildPlayerOptionsIfNeeded()
        {
            if (EditorUserBuildSettings.development)
            {
                ShowWarning($"#{m_WarningCount++}: Development build player, please build Release player when pulishing a release.");
            }
        }

        void ShowWarningsAboutSceneAbSize()
        {
            const long k_MaxSizeOfSingleSceneAbFile = 5 << 20;  // 5MB
            string formatedMaxSizeOfSingleSceneAbFile = EditorUtility.FormatBytes(k_MaxSizeOfSingleSceneAbFile);
            string sceneAbDir = ASUtilities.GetPlatformSpecificResourcePath(ASBuildConstants.k_SceneABPath);
            if (Directory.Exists(sceneAbDir))
            {
                var allSceneAbFiles = Directory.GetFiles(sceneAbDir, "*.abas", SearchOption.AllDirectories);
                var filesExceedSizeLimit = allSceneAbFiles.Where(path => new FileInfo(path).Length > k_MaxSizeOfSingleSceneAbFile);
                foreach (var f in filesExceedSizeLimit)
                {
                    ShowWarning($"#{m_WarningCount++}: Scene AssetBundle {f} has size > {formatedMaxSizeOfSingleSceneAbFile}.");
                }
            }
        }

        void ShowWarningsAboutFontAbSize()
        {
            const long k_MaxSizeOfSingleFontAbFile = 3 << 20;  // 3MB
            string formatedMaxSizeOfSingleFontAbFile = EditorUtility.FormatBytes(k_MaxSizeOfSingleFontAbFile);
            if (Directory.Exists(ASBuildConstants.k_FontABPath))
            {
                var allFontAbFiles = Directory.GetFiles(ASBuildConstants.k_FontABPath, "*.abas", SearchOption.AllDirectories);
                var filesExceedSizeLimit = allFontAbFiles.Where(path => new FileInfo(path).Length > k_MaxSizeOfSingleFontAbFile);
                foreach (var f in filesExceedSizeLimit)
                {
                    ShowWarning($"#{m_WarningCount++}: Font AssetBundle {f} has size > {formatedMaxSizeOfSingleFontAbFile}, we recommend some font strip tools (e.g., FontCreator, FontPruner, https://www.cxyzjd.com/article/linxinfa/88427808) to reduce font size.");
                }
            }
        }

#if UNITY_ANDROID
        void ShowWarningsAboutBytedanceSdkVersionIfNeeded()
        {
            if (!ProcessUtilities.CheckBytedanceSdkVersion(out var currentBytedanceSdkVersion))
            {
                ShowWarning($"#{m_WarningCount++}: Bytedance SDK version {currentBytedanceSdkVersion} < {ProcessUtilities.k_MinBytedanceSdkVersionString} (minimal required version).");
            }
        }

        void ShowWarningsAboutArchitectureIfNeeded()
        {
            BuildTargetGroup buildTargetGroup = BuildPipeline.GetBuildTargetGroup(EditorUserBuildSettings.activeBuildTarget);
            var architectures = PlayerSettings.Android.targetArchitectures;
            if (!architectures.HasFlag(AndroidArchitecture.ARM64))
            {
                ShowWarning($"#{m_WarningCount++}: Architechture Arm64 is not selected, please select both ARMv7 & ARM64 for compatibility.");
            }
            if (!architectures.HasFlag(AndroidArchitecture.ARMv7))
            {
                ShowWarning($"#{m_WarningCount++}: Architechture Armv7 is not selected, please select both ARMv7 & ARM64 for compatibility.");
            }
        }

        void ShowWarningsAboutFirstZips()
        {
            const long k_MaxTotalSize = 20L << 20;   // 20MB

            long totalSize = IGStartupFiles.startup_size;
            if (totalSize <= k_MaxTotalSize)
            {
                return;
            }

            BuildTargetGroup buildTargetGroup = BuildPipeline.GetBuildTargetGroup(EditorUserBuildSettings.activeBuildTarget);
            ScriptingImplementation scriptingBackend = PlayerSettings.GetScriptingBackend(buildTargetGroup);

            if (scriptingBackend == ScriptingImplementation.IL2CPP && !PlayerSettings.stripEngineCode)
            {
                ShowWarning($"#{m_WarningCount++}: IL2CPP engine code not stripped, please rebuild project with option 'StripEngineCode' checked.");
            }

            long firstZipSize = IGStartupFiles.first_size;
            long gameResSize = IGStartupFiles.gameres_size;
            long gameLibSize = IGStartupFiles.gamelib_size;

            string formatedFirstZipSize = EditorUtility.FormatBytes(firstZipSize);
            string formatedGameResSize = EditorUtility.FormatBytes(gameResSize);
            string formatedGameLibSize = EditorUtility.FormatBytes(gameLibSize);

            long k_MaxGameResSize = IsURP() ? (3L << 20) : (2L << 20);
            long k_MaxFirstZipSize = scriptingBackend == ScriptingImplementation.IL2CPP ? (2L << 20) : (6L << 20);

            long k_MaxGameLibsSize = 2L << 20;
            if (scriptingBackend == ScriptingImplementation.IL2CPP)
                k_MaxGameLibsSize = PlayerSettings.stripEngineCode ? (15L << 20) : (6L << 20);

            string formatedMaxGameResSize = EditorUtility.FormatBytes(k_MaxGameResSize);
            string formatedMaxFirstZipSize = EditorUtility.FormatBytes(k_MaxFirstZipSize);
            string formatedMaxGameLibsSize = EditorUtility.FormatBytes(k_MaxGameLibsSize);

            if (firstZipSize > k_MaxFirstZipSize)
            {
                ShowWarning($"#{m_WarningCount++}: first.zip has size {formatedFirstZipSize} > {formatedMaxFirstZipSize}, does it include user AssetBundle?");
            }

            if (gameResSize > k_MaxGameResSize)
            {
                ShowWarning($"#{m_WarningCount++}: Game resources has size {formatedGameResSize} > {formatedMaxGameResSize}, have you enabled 'Font Streaming' or have too few items selected?");
            }

            if (gameLibSize > k_MaxGameLibsSize)
            {
                ShowWarning($"#{m_WarningCount++}: Game libs size {formatedGameLibSize} > {formatedMaxGameLibsSize}, you may need to check the option 'Managed Stripping Level', cleanup unnecessary code/plugins or 3rd party libs.");
            }
        }

#endif // UNITY_ANDROID

        static bool IsURP()
        {
            return GraphicsSettings.renderPipelineAsset != null;
        }

        static void ShowWarning(string message)
        {
            GUILayout.BeginHorizontal();
            GUILayout.Space(2 * k_Padding);
            EditorGUILayout.TextArea(message, new GUIStyle { normal = new GUIStyleState { textColor = Color.white }, wordWrap = true });
            GUILayout.EndHorizontal();
            GUILayout.Space(lineSpace);
        }

        void OnStatsGUI()
        {
            GUILayout.BeginHorizontal();
            GUILayout.Space(k_Padding);
            GUILayout.Label(k_InstantGameStatsLabel);
            if (GUILayout.Button("Refresh", GUILayout.Width(80)))
            {
#if UNITY_ANDROID
                IGStartupFiles.RefreshInfo();
#endif
                StreamingFiles.RefreshInfo();
            }

            if (GUILayout.Button(k_ClearCloudAssetButton, GUILayout.Width(120)))
            {
                if (EditorUtility.DisplayDialog("Warning", "This will remove all cloud assets files except Custom Cloud Assets. You will need to rebuild them from scratch. Continue to clear?", "Yes", "Cancel"))
                {
                    StreamingFiles.ClearAllCacheFiles();
                }
            }

            GUILayout.Space(k_Padding);
            GUILayout.EndHorizontal();

            OnInstantGameStatsGUI?.Invoke();

            GUILayout.BeginHorizontal();
            GUILayout.Space(k_Padding * 2);

            EditorGUILayout.TextArea(string.Format(k_CloudAssetInfoFormat
                , "Cloud Assets", EditorUtility.FormatBytes(StreamingFiles.total_size)
                , "Scene", EditorUtility.FormatBytes(StreamingFiles.scenes_size)
                , "Texture", EditorUtility.FormatBytes(StreamingFiles.texture_size)
                , "Audio", EditorUtility.FormatBytes(StreamingFiles.audio_size)
                , "Mesh", EditorUtility.FormatBytes(StreamingFiles.mesh_size)
                , "Animation", EditorUtility.FormatBytes(StreamingFiles.animation_size)
                , "Font", EditorUtility.FormatBytes(StreamingFiles.font_size)
                , "Custom", EditorUtility.FormatBytes(StreamingFiles.custom_size)
                ), new GUIStyle { normal = new GUIStyleState { textColor = Color.white }, wordWrap = true });

            GUILayout.Space(k_Padding);
            GUILayout.EndHorizontal();
        }

        void OnLockedBadgeHintsGUI()
        {
            if (m_selectedBadgeLocked)
            {
                if (!string.IsNullOrEmpty(ASUOSHelper.BadgeName))
                {
                    GUILayout.BeginHorizontal();
                    GUILayout.Space(k_Padding);
                    EditorGUILayout.HelpBox("Selected badge is locked, create/select another badge to use for uploading.", MessageType.Error);
                    GUILayout.Space(k_Padding);
                    GUILayout.EndHorizontal();
                }
            }
            else if (ASUOSHelper.BadgeName.Equals("latest") || string.IsNullOrEmpty(ASUOSHelper.BadgeName))
            {
                GUILayout.BeginHorizontal();
                GUILayout.Space(k_Padding);
                EditorGUILayout.HelpBox("Badge latest changes on every upload, do not use it in game release.", MessageType.Warning);
                GUILayout.Space(k_Padding);
                GUILayout.EndHorizontal();
            }
        }
    }
}

#endif  //  IG_C301 || IG_C302 || IG_C303 || TUANJIE_2022_3_OR_NEWER, Auto generated by AddMacroForInstantGameFiles.exe
