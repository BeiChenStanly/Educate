#if  IG_C301 || IG_C302 || IG_C303 || TUANJIE_2022_3_OR_NEWER // Auto generated by AddMacroForInstantGameFiles.exe

using System.IO;
using System.Collections.Generic;
using UnityEditor;
using UnityEditor.Build.Reporting;
using UnityEditor.Build;
using UnityEngine;
using UnityEditor.UnityLinker;
using System.Text;

namespace Unity.AutoStreaming
{
    internal class ASBuildConstants
    {
        internal const int k_CallbackOrder = 1;

        public static readonly string k_TextureABPath = AutoStreamingSettings.autoStreamingDirectory + "/TextureABs";
        public static readonly string k_SceneABPath = AutoStreamingSettings.autoStreamingDirectory + "/SceneABs";
        public static readonly string k_MeshABPath = AutoStreamingSettings.autoStreamingDirectory + "/MeshRes";
        public static readonly string k_AudioABPath = AutoStreamingSettings.autoStreamingDirectory + "/AudioRes";
        public static readonly string k_AnimationABPath = AutoStreamingSettings.autoStreamingDirectory + "/AnimRes";
        public static readonly string k_FontABPath = AutoStreamingSettings.autoStreamingDirectory + "/FontRes";
        public static readonly string k_AddressabeAssetsPath = AutoStreamingSettings.autoStreamingDirectory + "/Addressable";
        public static readonly string k_CustomCloudAssetsPath = Application.dataPath + "/../CustomCloudAssets";
        public static readonly string k_CloudABPath = Application.dataPath + "/../CustomCloudAssets/CloudAB";

    }

    class ASUnityLinkerProcessor : IUnityLinkerProcessor
    {
        public int callbackOrder => 1;

        private static string strLinkXml =
@"<linker>
    <assembly fullname=""UnityEngine.AutoStreamingModule"">
        <type fullname=""UnityEngine.AutoStreaming"" preserve=""all"" />
    </assembly>
    <assembly fullname=""UnityEngine.AssetBundleModule"">
        <type fullname=""UnityEngine.AssetBundle"" preserve=""all"" />
    </assembly>
    <assembly fullname=""UnityEngine.JSONSerializeModule"">
        <type fullname=""UnityEngine.JsonUtility"" preserve=""all"" />
    </assembly>
    <assembly fullname=""UnityEngine.UnityWebRequestModule"">
        <type fullname=""UnityEngine.Networking.UnityWebRequest"" preserve=""all"" />
    </assembly>
    <assembly fullname=""UnityEngine"">
        <type fullname=""UnityEngine.GameObject"" preserve=""all"" />
    </assembly>
    <assembly fullname=""Unity.Timeline"">
        <type fullname=""UnityEngine.Timeline.TimelineAsset"" preserve=""all"" />
    </assembly>
</linker>
";

        public string GenerateAdditionalLinkXmlFile(BuildReport report, UnityEditor.UnityLinker.UnityLinkerBuildPipelineData data)
        {
            if (!PlayerSettings.autoStreaming)
                return null;

            if (!Directory.Exists(AutoStreamingSettings.autoStreamingDirectory))
                Directory.CreateDirectory(AutoStreamingSettings.autoStreamingDirectory);

            var path = Path.Combine(AutoStreamingSettings.autoStreamingDirectory, "AS_Module_Preserve.xml");
            path = Path.GetFullPath(path);
            File.WriteAllText(path, strLinkXml);
            return path;
        }

#if !UNITY_2021_2_OR_NEWER
        void IUnityLinkerProcessor.OnAfterRun(BuildReport report, UnityLinkerBuildPipelineData data)
        {
            var path = Path.Combine(AutoStreamingSettings.autoStreamingDirectory, "AS_Module_Preserve.xml");
            if (File.Exists(path))
                File.Delete(path);
        }

        void IUnityLinkerProcessor.OnBeforeRun(BuildReport report, UnityLinkerBuildPipelineData data)
        {
        }

#endif
    }

    internal class ASBuildPreprocessor : IPreprocessBuildWithReport
    {
        public int callbackOrder { get { return ASBuildConstants.k_CallbackOrder; } }

        public void OnPreprocessBuild(BuildReport report)
        {
            if (!PlayerSettings.autoStreaming)
                return;

            PrepareOutputDirectory();

            if (report.summary.options.HasFlag(BuildOptions.BuildAdditionalStreamedScenes))
                return;

            CheckTextureOk();
            CheckSceneOk();
        }

        internal void PrepareOutputDirectory()
        {

            //offer a place for user to manually copy files, like video,xml to here
            if (!Directory.Exists(ASBuildConstants.k_CustomCloudAssetsPath))
            {
                Directory.CreateDirectory(ASBuildConstants.k_CustomCloudAssetsPath);
            }
        }

        static void CheckTextureOk()
        {
            int count = 0;

            var allTexs = AutoStreamingSettings.textures;
            foreach (var item in allTexs)
            {
                if (item.usePlaceholder)
                {
                    count++;
                }
            }

            string texturePath = ASUtilities.GetPlatformSpecificResourcePath(ASBuildConstants.k_TextureABPath);
            if (Directory.Exists(texturePath))
                count = count - Directory.GetFiles(texturePath, "*.abas").Length;

            if (count > 0)
                Debug.LogError("Texture Streaming: Detected " + count + " texture streaming files not generated, please click 'Generate AssetBundles' button in 'Windows -> AutoStreaming -> TextureStreaming' panel to generate them, and rebuild the Player.");
        }

        static void CheckSceneOk()
        {
            int count = 0;

            var allScenes = AutoStreamingSettings.scenes;
            foreach (var item in allScenes)
            {
                if (item.onDemandDownload)
                {
                    count++;
                }
            }

            string scenePath = ASUtilities.GetPlatformSpecificResourcePath(ASBuildConstants.k_SceneABPath);

            //not streaming scenes, delete scenes file in k_AutoStreamingAbLutDir to prevent error
            if (count == 0)
            {
                if(File.Exists(Path.Combine(ASSceneUI.k_AutoStreamingAbLutDir, "scenes")))
                    File.Delete(Path.Combine(ASSceneUI.k_AutoStreamingAbLutDir, "scenes"));
                return;
            }

            if (Directory.Exists(scenePath))
                count = count - (Directory.GetFiles(scenePath, "*.abas").Length -1);

            if (count > 0)
                Debug.LogError("Scene Streaming: Detected " + count + " Scene streaming files not generated, please click 'Generate ABs' button in 'Windows -> AutoStreaming -> SceneStreaming' panel to generate them, and rebuild the Player.");

            if (count < 0)
                Debug.LogError("Scene Streaming: Detected " + (-count) + " Scene streaming files not matched, please click 'Generate ABs' button in 'Windows -> AutoStreaming -> SceneStreaming' panel to generate them, and rebuild the Player.");
        }
    }
}

#endif  //  IG_C301 || IG_C302 || IG_C303 || TUANJIE_2022_3_OR_NEWER, Auto generated by AddMacroForInstantGameFiles.exe
