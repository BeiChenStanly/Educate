#if  IG_C301 || IG_C302 || IG_C303 || TUANJIE_2022_3_OR_NEWER // Auto generated by AddMacroForInstantGameFiles.exe

using System.Collections.Generic;
using UnityEngine;
using UnityEditor;

namespace Unity.AutoStreaming
{
    internal class ASMainWindow : EditorWindow
    {
        enum Mode
        {
            AutoStreamingCfg = 0,
            AssetBundleTools
        }
        enum ASMode
        {
            TextureStreaming = 0,
            AudioStreaming,
            MeshStreaming,
            AnimationStreaming,
            SceneStreaming,
            Config,
            Utility
        }

        private List<ASTextureTreeDataItem> m_TextureItems;
        public List<ASTextureTreeDataItem> TextureData
        {
            get
            {
                if (m_TextureItems == null)
                {
                    m_TextureItems = new List<ASTextureTreeDataItem>();

                    var texRoot = new ASTextureTreeDataItem("Root", -1, 0);
                    m_TextureItems.Add(texRoot);

                    var texs = AutoStreamingSettings.textures;
                    foreach (var texSettings in texs)
                    {
                        var texItem = new ASTextureTreeDataItem(texSettings, 0, m_TextureItems.Count);
                        m_TextureItems.Add(texItem);
                    }
                }

                return m_TextureItems;
            }
            set
            {
                m_TextureItems = value;
            }
        }

        private List<ASAudioTreeDataItem> m_AudioItems;
        public List<ASAudioTreeDataItem> AudioData
        {
            get
            {
                if (m_AudioItems == null)
                {
                    m_AudioItems = new List<ASAudioTreeDataItem>();

                    var audioRoot = new ASAudioTreeDataItem("Root", -1, 0);
                    m_AudioItems.Add(audioRoot);

                    var audios = AutoStreamingSettings.audios;
                    foreach (var audioSettings in audios)
                    {
                        var audioItem = new ASAudioTreeDataItem(audioSettings, 0, m_AudioItems.Count);
                        m_AudioItems.Add(audioItem);
                    }
                }

                return m_AudioItems;
            }
            set
            {
                m_AudioItems = value;
            }
        }

        private List<ASMeshTreeDataItem> m_MeshItems;
        public List<ASMeshTreeDataItem> MeshData
        {
            get
            {
                if (m_MeshItems == null)
                {
                    m_MeshItems = new List<ASMeshTreeDataItem>();

                    var meshRoot = new ASMeshTreeDataItem("Root", -1, 0);
                    m_MeshItems.Add(meshRoot);

                    var meshes = AutoStreamingSettings.meshes;
                    foreach (var meshSettings in meshes)
                    {
                        var meshItem = new ASMeshTreeDataItem(meshSettings, 0, m_MeshItems.Count);
                        m_MeshItems.Add(meshItem);
                    }
                }

                return m_MeshItems;
            }
            set
            {
                m_MeshItems = value;
            }
        }
        private List<ASAnimationTreeDataItem> m_AnimationItems;
        public List<ASAnimationTreeDataItem> AnimationData
        {
            get
            {
                if (m_AnimationItems == null)
                {
                    m_AnimationItems = new List<ASAnimationTreeDataItem>();

                    var animRoot = new ASAnimationTreeDataItem("Root", -1, 0);
                    m_AnimationItems.Add(animRoot);

                    var animations = AutoStreamingSettings.animations;
                    foreach (var animSettings in animations)
                    {
                        var animItem = new ASAnimationTreeDataItem(animSettings, 0, m_AnimationItems.Count);
                        m_AnimationItems.Add(animItem);
                    }
                }

                return m_AnimationItems;
            }
            set
            {
                m_AnimationItems = value;
            }
        }

        private List<ASSceneTreeDataItem> m_SceneItems;
        public List<ASSceneTreeDataItem> SceneData
        {
            get
            {
                if (m_SceneItems == null)
                {
                    m_SceneItems = new List<ASSceneTreeDataItem>();

                    var sceneRoot = new ASSceneTreeDataItem("Root", -1, 0);
                    m_SceneItems.Add(sceneRoot);

                    var scenes = AutoStreamingSettings.scenes;
                    foreach (var sceneSettings in scenes)
                    {
                        var sceneItem = new ASSceneTreeDataItem(sceneSettings, 0, m_SceneItems.Count);
                        m_SceneItems.Add(sceneItem);
                    }
                }

                return m_SceneItems;
            }
            set
            {
                m_SceneItems = value;
            }
        }

        private List<ASSharedSceneAssetTreeDataItem> m_SharedSceneAssetItems;
        public List<ASSharedSceneAssetTreeDataItem> SharedSceneAssetData
        {
            get
            {
                if (m_SharedSceneAssetItems == null)
                {
                    m_SharedSceneAssetItems = new List<ASSharedSceneAssetTreeDataItem>();

                    var sharedSceneAssetRoot = new ASSharedSceneAssetTreeDataItem("Root", -1, 0);
                    m_SharedSceneAssetItems.Add(sharedSceneAssetRoot);

                    var sharedSceneAssets = AutoStreamingSettings.sharedSceneAssets;
                    foreach (var sharedSceneAssetSettings in sharedSceneAssets)
                    {
                        var sharedSceneAssetItem = new ASSharedSceneAssetTreeDataItem(sharedSceneAssetSettings, 0, m_SharedSceneAssetItems.Count);
                        m_SharedSceneAssetItems.Add(sharedSceneAssetItem);
                    }
                }

                return m_SharedSceneAssetItems;
            }
            set
            {
                m_SharedSceneAssetItems = value;
            }
        }

        Mode m_Mode;
        ASMode m_ASMode;
        ASTextureUI m_TextureUI;
        ASAudioUI m_AudioUI;
        ASMeshUI m_MeshUI;
        ASAnimationUI m_AnimationUI;
        ASSceneUI m_SceneUI;
        ASConfigUI m_ConfigUI;
        ASUtilityUI m_UtilityUI;

        AssetBundleToolsUI m_AssetBundleToolsUI;

        public Rect ModeTabRect
        {
            get { return new Rect(0, 0, position.width, 22f); }
        }

        [MenuItem("Window/Auto Streaming")]
        static void CreateWindow()
        {
            var window = GetWindow<ASMainWindow>();
            window.titleContent = new GUIContent("Instant Game");
            window.minSize = new Vector2(200, 200);
            window.Show();
        }

        private static ASMainWindow sInstance = null;
        public static ASMainWindow Instance { get { return sInstance; } }

        public ASMainWindow()
        {
            sInstance = this;
        }

        void OnGUI()
        {
            Init();

            ModeSelection();
            switch (m_Mode)
            {
                case Mode.AssetBundleTools:
                    OnAssetBundleToolsGUI();
                    break;
                case Mode.AutoStreamingCfg:
                    OnAutoStreamingGUI();
                    break;
            }
        }

        void ModeSelection()
        {
            GUILayout.BeginHorizontal();

            m_Mode = (Mode)EditorGUILayout.Popup((int)m_Mode, new string[]
                {
                    "Auto Streaming",
                    "AssetBundle Tools"
                },
                GUILayout.MaxWidth(150));

            GUILayout.Space(20);

            if (m_Mode == Mode.AutoStreamingCfg)
            {
                m_ASMode = (ASMode)GUILayout.Toolbar((int)m_ASMode,
                    new string[]
                    {
                        "Texture Streaming",
                        "Audio Streaming",
                        "Mesh Streaming",
                        "Animation Streaming",
                        "Scene Streaming",
                        "Cfg & Publish",
                        "Utilities"
                    });
            }

            GUILayout.EndHorizontal();
        }

        void OnAutoStreamingGUI()
        {
            switch (m_ASMode)
            {
                case ASMode.TextureStreaming:
                    m_TextureUI.OnGUI();
                    break;
                case ASMode.AudioStreaming:
                    m_AudioUI.OnGUI();
                    break;
                case ASMode.MeshStreaming:
                    m_MeshUI.OnGUI();
                    break;
                case ASMode.AnimationStreaming:
                    m_AnimationUI.OnGUI();
                    break;
                case ASMode.SceneStreaming:
                    m_SceneUI.OnGUI();
                    break;
                case ASMode.Config:
                    m_ConfigUI.OnGUI();
                    break;

                case ASMode.Utility:
                    m_UtilityUI.OnGUI();
                    break;
            }
        }

        void OnAssetBundleToolsGUI()
        {
            m_AssetBundleToolsUI.OnGUI();
        }

        void Init()
        {
            if (m_TextureUI == null)
            {
                m_TextureUI = new ASTextureUI();
            }
            m_TextureUI.Init();

            if (m_AudioUI == null)
            {
                m_AudioUI = new ASAudioUI();
            }
            m_AudioUI.Init();

            if (m_MeshUI == null)
            {
                m_MeshUI = new ASMeshUI();
            }
            m_MeshUI.Init();

            if (m_AnimationUI == null)
            {
                m_AnimationUI = new ASAnimationUI();
            }
            m_AnimationUI.Init();

            if (m_SceneUI == null)
            {
                m_SceneUI = new ASSceneUI();
            }
            m_SceneUI.Init();

            if (m_ConfigUI == null)
            {
                m_ConfigUI = new ASConfigUI();
            }

            if (m_UtilityUI == null) 
            {
                m_UtilityUI = new ASUtilityUI();
            }

            if (m_AssetBundleToolsUI == null)
            {
                m_AssetBundleToolsUI = new AssetBundleToolsUI();
            }
        }

        private void OnDestroy()
        {
            if (m_AssetBundleToolsUI != null)
            {
                m_AssetBundleToolsUI.UnloadAllAssetBundles();
            }
        }
    }
}

#endif  //  IG_C301 || IG_C302 || IG_C303 || TUANJIE_2022_3_OR_NEWER, Auto generated by AddMacroForInstantGameFiles.exe
