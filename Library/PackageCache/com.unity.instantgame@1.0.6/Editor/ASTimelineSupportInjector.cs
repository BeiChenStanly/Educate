#if  IG_C301 || IG_C302 || IG_C303 || TUANJIE_2022_3_OR_NEWER // Auto generated by AddMacroForInstantGameFiles.exe

using System;
using Mono.Cecil;
using Mono.Cecil.Cil;
using UnityEngine;
using UnityEditor.Build;
using UnityEditor.Build.Reporting;
using System.Reflection;
using MethodAttributes = Mono.Cecil.MethodAttributes;
using ParameterAttributes = Mono.Cecil.ParameterAttributes;
using Object = UnityEngine.Object;
using UnityEditor;
using System.IO;

namespace Unity.AutoStreaming
{
    /***
     * This class add method GetStreamingAssetsInstanceIDs() to class TimelineAsset if Unity.Timeline.dll exists.
     * 
     * Steps to write injecting code:
     * 1. add  GetStreamingAssetsInstanceIDs() method to TimelineAsset.cs
     * 2. compile cs code to generate Unity.Timeline.dll
     * 3. open Unity.Timeline.dll with ildasm.exe from Windows System
     * 4. find class TimelineAsset and method GetStreamingAssetsInstanceIDs
     * 5. write injecting code according to the il code of GetStreamingAssetsInstanceIDs method

     //implements virutal method GetStreamingAssetsInstanceIDs in PlayableAsset
     public override void GetStreamingAssetsInstanceIDs(GameObject gameObject ,ref List<int> saInstanceIDs)
     {
         saInstanceIDs.Clear();
         IEnumerable<TrackAsset> tracks = GetOutputTracks();

         PlayableDirector director = gameObject.GetComponent<PlayableDirector>();
         if(director == null)
         {
             return;
         }

         foreach (var track in tracks)
         {
             if (typeof(ActivationTrack).IsInstanceOfType(track))
             {
                 GameObject obj = track.GetGameObjectBinding(director);
                 if(obj!=null)
                 {
                     obj.SetActive(false); //inactive gameobject binded to activation track
                 }
             }
             else if(typeof(AnimationTrack).IsInstanceOfType(track))
             {
                 // try get streaming AnimationClips
                 if (track.animClip != null && track.animClip.IsCloudResource())
                 {
                     saInstanceIDs.Add(track.animClip.GetInstanceID());
                 }

                 foreach(var clip in track.clips)
                 {
                     var animPlayableAsset = clip.asset as AnimationPlayableAsset;
                     if (animPlayableAsset!=null && animPlayableAsset.clip != null && animPlayableAsset.clip.IsCloudResource())
                     {
                         saInstanceIDs.Add(animPlayableAsset.clip.GetInstanceID());
                    }
                }

                 // try get Animator and stop auto play on start
                 GameObject obj = track.GetGameObjectBinding(director);
                 if(obj!=null)
                 {
                     Animator animator = obj.GetComponent<Animator>();
                     if(animator!=null)
                     {
                         animator.runtimeAnimatorController = null; 
                     }
                  }
             }
             else if(typeof(AudioTrack).IsInstanceOfType(track))
             {

                 foreach(var clip in track.clips)
                 {
                     var audioPlayableAsset = clip.asset as AudioPlayableAsset;
                     if (audioPlayableAsset!=null && audioPlayableAsset.clip != null && audioPlayableAsset.clip.IsCloudResource())
                     {
                         saInstanceIDs.Add(audioPlayableAsset.clip.GetInstanceID());
                     }
                 }

                 // try get AudioSource and stop auto play on start
                 GameObject obj = track.GetGameObjectBinding(director);
                 if(obj!=null)
                 {
                     AudioSource source = obj.GetComponent<AudioSource>();
                      if(source!=null)
                      {
                         source.playOnAwake = false;  
                      }
                 }
             }
         }
     }
    ***/

    public class ASTimelineSupportInjector : IPostBuildPlayerScriptDLLs
    {
        public int callbackOrder => 1;

        public void OnPostBuildPlayerScriptDLLs(BuildReport report)
        {
            if (PlayerSettings.autoStreaming)
            {
                Inject("Temp/StagingArea/Data/Managed/Unity.Timeline.dll", "TimelineAsset");
            }
        }

        private static void Inject(string assemblyPath, string typeName)
        {
            if (!File.Exists(assemblyPath))
                return;

            bool hasSymbolsFile = File.Exists(Path.ChangeExtension(assemblyPath, "pdb"));
            using (var module = ModuleDefinition.ReadModule(assemblyPath, new ReaderParameters { ReadSymbols = hasSymbolsFile, ReadWrite = true }))
            {
                if (module == null)
                {
                    Debug.Log(string.Format("{0} not exist, skip Timeline AS support injection.", assemblyPath));
                    return;
                }
                try
                {
                    foreach (var type in module.Types)
                    {
                        if (typeName == type.Name)
                        {
                            AddMethod(module, type);
                        }
                    }
                    module.Write(new WriterParameters { WriteSymbols = hasSymbolsFile });
                }
                catch (Exception ex)
                {
                    Debug.LogError(string.Format("Failed to inject AutoStreaming Support to Assembly: {0} Error: {1}", assemblyPath, ex.Message));
                }
            }
        }

        private static void AddMethod(ModuleDefinition module, TypeDefinition type)
        {
            MethodDefinition injectedMethod = null;

            foreach (var method in type.Methods)
            {
                if (method.Name == "GetStreamingAssetsInstanceIDs")
                {
                    injectedMethod = method;
                    injectedMethod.Body.Instructions.Clear();
                    injectedMethod.Body.Variables.Clear();
                    break;
                }
            }

            if (injectedMethod == null)
            {
                //type used
                var voidType = module.ImportReference(typeof(void));
                var gameObjectType = module.ImportReference(typeof(UnityEngine.GameObject));
                var intListTypeRef = module.ImportReference(typeof(System.Collections.Generic.List<Int32>).MakeByRefType());

                injectedMethod = new MethodDefinition("GetStreamingAssetsInstanceIDs",
                    MethodAttributes.Public | MethodAttributes.HideBySig | MethodAttributes.Virtual, voidType);
                ParameterDefinition para1 = new ParameterDefinition("gameObject", ParameterAttributes.None, gameObjectType);
                ParameterDefinition para2 = new ParameterDefinition("saInstanceIDs", ParameterAttributes.None, intListTypeRef);
                injectedMethod.Parameters.Add(para1);
                injectedMethod.Parameters.Add(para2);
                type.Methods.Add(injectedMethod);
            }

#region varibales
            var varibales = injectedMethod.Body.Variables;

            var trackAssetTypeDef = module.GetType("UnityEngine.Timeline", "TrackAsset");
            var trackAssetType = Type.GetType(trackAssetTypeDef.FullName + ", " + trackAssetTypeDef.Module.Assembly.FullName);
            var IEnumerableType = typeof(System.Collections.Generic.IEnumerable<>);
            var trackAsset_IEnumerableType = IEnumerableType.MakeGenericType(trackAssetType);
            var V_0 = new VariableDefinition(module.ImportReference(trackAsset_IEnumerableType));

            var V_1 = new VariableDefinition(module.ImportReference(typeof(UnityEngine.Playables.PlayableDirector)));
            var V_2 = new VariableDefinition(module.ImportReference(typeof(bool)));

            var IEnumeratorType = typeof(System.Collections.Generic.IEnumerator<>);
            var trackAsset_IEnumeratorType = IEnumeratorType.MakeGenericType(trackAssetType);
            var V_3 = new VariableDefinition(module.ImportReference(trackAsset_IEnumeratorType));

            var V_4 = new VariableDefinition(module.ImportReference(trackAssetType));
            var V_5 = new VariableDefinition(module.ImportReference(typeof(bool)));
            var V_6 = new VariableDefinition(module.ImportReference(typeof(UnityEngine.GameObject)));
            var V_7 = new VariableDefinition(module.ImportReference(typeof(bool)));
            var V_8 = new VariableDefinition(module.ImportReference(typeof(bool)));
            var V_9 = new VariableDefinition(module.ImportReference(typeof(UnityEngine.GameObject)));
            var V_10 = new VariableDefinition(module.ImportReference(typeof(bool)));

            var TimelineClipTypeDef = module.GetType("UnityEngine.Timeline", "TimelineClip");
            var TimelineClipType= Type.GetType(TimelineClipTypeDef.FullName + ", " + TimelineClipTypeDef.Module.Assembly.FullName);

            var V_11 = new VariableDefinition(module.ImportReference(TimelineClipType.MakeArrayType()));

            var V_12 = new VariableDefinition(module.ImportReference(typeof(Int32)));
            var V_13 = new VariableDefinition(module.ImportReference(TimelineClipType));

            var AnimationPlayableAssetTypeDef = module.GetType("UnityEngine.Timeline", "AnimationPlayableAsset");
            var AnimationPlayableAssetType = Type.GetType(AnimationPlayableAssetTypeDef.FullName + ", " + AnimationPlayableAssetTypeDef.Module.Assembly.FullName);
            var V_14 = new VariableDefinition(module.ImportReference(AnimationPlayableAssetType));
            var V_15 = new VariableDefinition(module.ImportReference(typeof(bool)));
            var V_16 = new VariableDefinition(module.ImportReference(typeof(bool)));
            var V_17 = new VariableDefinition(module.ImportReference(typeof(UnityEngine.Animator)));
            var V_18 = new VariableDefinition(module.ImportReference(typeof(bool)));
            var V_19 = new VariableDefinition(module.ImportReference(typeof(bool)));
            var V_20 = new VariableDefinition(module.ImportReference(typeof(UnityEngine.GameObject)));

            var AudioPlayableAssetTypeDef = module.GetType("UnityEngine.Timeline", "AudioPlayableAsset");
            var AudioPlayableAssetType = Type.GetType(AudioPlayableAssetTypeDef.FullName + ", " + AudioPlayableAssetTypeDef.Module.Assembly.FullName);
            var V_21 = new VariableDefinition(module.ImportReference(TimelineClipType.MakeArrayType()));
            var V_22 = new VariableDefinition(module.ImportReference(typeof(Int32)));
            var V_23 = new VariableDefinition(module.ImportReference(TimelineClipType));
            var V_24 = new VariableDefinition(module.ImportReference(AudioPlayableAssetType));
            var V_25 = new VariableDefinition(module.ImportReference(typeof(bool)));
            var V_26 = new VariableDefinition(module.ImportReference(typeof(bool)));
            var V_27 = new VariableDefinition(module.ImportReference(typeof(UnityEngine.AudioSource)));
            var V_28 = new VariableDefinition(module.ImportReference(typeof(bool)));

            varibales.Add(V_0);
            varibales.Add(V_1);
            varibales.Add(V_2);
            varibales.Add(V_3);
            varibales.Add(V_4);
            varibales.Add(V_5);
            varibales.Add(V_6);
            varibales.Add(V_7);
            varibales.Add(V_8);
            varibales.Add(V_9);
            varibales.Add(V_10);
            varibales.Add(V_11);
            varibales.Add(V_12);
            varibales.Add(V_13);
            varibales.Add(V_14);
            varibales.Add(V_15);
            varibales.Add(V_16);
            varibales.Add(V_17);
            varibales.Add(V_18);
            varibales.Add(V_19);
            varibales.Add(V_20);
            varibales.Add(V_21);
            varibales.Add(V_22);
            varibales.Add(V_23);
            varibales.Add(V_24);
            varibales.Add(V_25);
            varibales.Add(V_26);
            varibales.Add(V_27);
            varibales.Add(V_28);
            injectedMethod.Body.InitLocals = true;
#endregion
            var instructions = injectedMethod.Body.Instructions;

            instructions.Add(Instruction.Create(OpCodes.Nop));
            instructions.Add(Instruction.Create(OpCodes.Ldarg_2));
            instructions.Add(Instruction.Create(OpCodes.Ldind_Ref));

            MethodInfo list_clear = typeof(System.Collections.Generic.List<Int32>).GetMethod("Clear", Type.EmptyTypes);
            MethodReference list_clear_ref = module.ImportReference(list_clear);
            instructions.Add(Instruction.Create(OpCodes.Callvirt, list_clear_ref));
            instructions.Add(Instruction.Create(OpCodes.Nop));

            instructions.Add(Instruction.Create(OpCodes.Ldarg_0));

            var TimelineAssetTypeDef = module.GetType("UnityEngine.Timeline", "TimelineAsset");
            var TimelineAssetType = Type.GetType(TimelineAssetTypeDef.FullName + ", " + TimelineAssetTypeDef.Module.Assembly.FullName);
            MethodInfo timelineAsset_GetOutputTracks = TimelineAssetType.GetMethod("GetOutputTracks", Type.EmptyTypes);
            MethodReference timelineAsset_GetOutputTracks_ref = module.ImportReference(timelineAsset_GetOutputTracks);
            instructions.Add(Instruction.Create(OpCodes.Call, timelineAsset_GetOutputTracks_ref));

            instructions.Add(Instruction.Create(OpCodes.Stloc_0));
            instructions.Add(Instruction.Create(OpCodes.Ldarg_1));

            MethodInfo gameobject_getComponet = typeof(GameObject).GetMethod("GetComponent", Type.EmptyTypes);
            MethodInfo gameobject_getComponet_generic_director = gameobject_getComponet.MakeGenericMethod(typeof(UnityEngine.Playables.PlayableDirector));
            MethodReference gameobject_getComponet_generic_director_ref = module.ImportReference(gameobject_getComponet_generic_director);
            instructions.Add(Instruction.Create(OpCodes.Callvirt, gameobject_getComponet_generic_director_ref));
            instructions.Add(Instruction.Create(OpCodes.Stloc_1));

            instructions.Add(Instruction.Create(OpCodes.Ldloc_1));
            instructions.Add(Instruction.Create(OpCodes.Ldnull));

            MethodInfo object_op_equal = typeof(Object).GetMethod("op_Equality", new[] { typeof(Object), typeof(Object) });
            MethodReference object_op_equal_ref = module.ImportReference(object_op_equal);
            instructions.Add(Instruction.Create(OpCodes.Call, object_op_equal_ref));

            instructions.Add(Instruction.Create(OpCodes.Stloc_2));
            instructions.Add(Instruction.Create(OpCodes.Ldloc_2));

            var il_0028 = Instruction.Create(OpCodes.Nop);
            instructions.Add(Instruction.Create(OpCodes.Brfalse_S, il_0028));
            instructions.Add(Instruction.Create(OpCodes.Nop));

            var il_0277 = Instruction.Create(OpCodes.Ret);
            instructions.Add(Instruction.Create(OpCodes.Br, il_0277));
            instructions.Add(il_0028);
            instructions.Add(Instruction.Create(OpCodes.Ldloc_0));

            MethodInfo iEnumerable_getEnumerator = trackAsset_IEnumerableType.GetMethod("GetEnumerator", Type.EmptyTypes);
            MethodReference iEnumerable_getEnumerator_ref = module.ImportReference(iEnumerable_getEnumerator);
            instructions.Add(Instruction.Create(OpCodes.Callvirt, iEnumerable_getEnumerator_ref));
            instructions.Add(Instruction.Create(OpCodes.Stloc_3));

            var il_025f = Instruction.Create(OpCodes.Ldloc_3);
            var il_0030 = Instruction.Create(OpCodes.Br, il_025f);
            instructions.Add(il_0030);
            var il_0035 = Instruction.Create(OpCodes.Ldloc_3);
            instructions.Add(il_0035);

            MethodInfo iEnumerable_getcurrent = trackAsset_IEnumeratorType.GetMethod("get_Current", Type.EmptyTypes);
            MethodReference iEnumerable_getcurrent_ref = module.ImportReference(iEnumerable_getcurrent);
            instructions.Add(Instruction.Create(OpCodes.Callvirt, iEnumerable_getcurrent_ref));

            instructions.Add(Instruction.Create(OpCodes.Stloc_S, V_4));
            instructions.Add(Instruction.Create(OpCodes.Nop));

            var ActivationTrackTypeDef = module.GetType("UnityEngine.Timeline", "ActivationTrack");
            var ActivationTrackType = Type.GetType(ActivationTrackTypeDef.FullName + ", " + ActivationTrackTypeDef.Module.Assembly.FullName);
            TypeReference activationTrack = module.ImportReference(ActivationTrackType);
            instructions.Add(Instruction.Create(OpCodes.Ldtoken, activationTrack));

            MethodInfo type_getTypeFromHandle = typeof(System.Type).GetMethod("GetTypeFromHandle", new[] { typeof(System.RuntimeTypeHandle) });
            MethodReference type_getTypeFromHandle_ref = module.ImportReference(type_getTypeFromHandle);
            instructions.Add(Instruction.Create(OpCodes.Call, type_getTypeFromHandle_ref));

            instructions.Add(Instruction.Create(OpCodes.Ldloc_S, V_4));

            MethodInfo type_IsInstanceOfType = typeof(System.Type).GetMethod("IsInstanceOfType", new[] { typeof(System.RuntimeTypeHandle) });
            MethodReference type_IsInstanceOfType_ref = module.ImportReference(type_IsInstanceOfType);
            instructions.Add(Instruction.Create(OpCodes.Callvirt, type_IsInstanceOfType_ref));

            instructions.Add(Instruction.Create(OpCodes.Stloc_S, V_5));
            instructions.Add(Instruction.Create(OpCodes.Ldloc_S, V_5));

            var AnimationTrackTypeDef = module.GetType("UnityEngine.Timeline", "AnimationTrack");
            var AnimationTrackType = Type.GetType(AnimationTrackTypeDef.FullName + ", " + AnimationTrackTypeDef.Module.Assembly.FullName);
            TypeReference animationTrack = module.ImportReference(AnimationTrackType);
            var il_007f = Instruction.Create(OpCodes.Ldtoken, animationTrack);
            instructions.Add(Instruction.Create(OpCodes.Brfalse_S, il_007f));

            instructions.Add(Instruction.Create(OpCodes.Nop));
            instructions.Add(Instruction.Create(OpCodes.Ldloc_S, V_4));
            instructions.Add(Instruction.Create(OpCodes.Ldloc_1));


            MethodInfo TrackAsset_GetGameObjectBinding = trackAssetType.GetMethod("GetGameObjectBinding", BindingFlags.Instance | BindingFlags.NonPublic, null , new[] { typeof(UnityEngine.Playables.PlayableDirector) }, null);
            MethodReference TrackAsset_GetGameObjectBinding_ref = module.ImportReference(TrackAsset_GetGameObjectBinding);
            instructions.Add(Instruction.Create(OpCodes.Callvirt, TrackAsset_GetGameObjectBinding_ref));

            instructions.Add(Instruction.Create(OpCodes.Stloc_S, V_6));
            instructions.Add(Instruction.Create(OpCodes.Ldloc_S, V_6));
            instructions.Add(Instruction.Create(OpCodes.Ldnull));

            MethodInfo object_op_inequal = typeof(Object).GetMethod("op_Inequality", new[] { typeof(Object), typeof(Object) });
            MethodReference object_op_inequal_ref = module.ImportReference(object_op_inequal);
            instructions.Add(Instruction.Create(OpCodes.Call, object_op_inequal_ref));

            instructions.Add(Instruction.Create(OpCodes.Stloc_S, V_7));
            instructions.Add(Instruction.Create(OpCodes.Ldloc_S, V_7));

            var il_0079 = Instruction.Create(OpCodes.Nop);
            instructions.Add(Instruction.Create(OpCodes.Brfalse_S, il_0079));
            instructions.Add(Instruction.Create(OpCodes.Nop));
            instructions.Add(Instruction.Create(OpCodes.Ldloc_S, V_6));
            instructions.Add(Instruction.Create(OpCodes.Ldc_I4_0));

            MethodInfo GameObject_SetActive = typeof(UnityEngine.GameObject).GetMethod("SetActive", new[] { typeof(bool) });
            MethodReference GameObject_SetActive_ref = module.ImportReference(GameObject_SetActive);
            instructions.Add(Instruction.Create(OpCodes.Callvirt, GameObject_SetActive_ref));
            instructions.Add(Instruction.Create(OpCodes.Nop));
            instructions.Add(Instruction.Create(OpCodes.Nop));
            instructions.Add(il_0079);

            var il_025e = Instruction.Create(OpCodes.Nop);
            instructions.Add(Instruction.Create(OpCodes.Br, il_025e));
            instructions.Add(il_007f);
            instructions.Add(Instruction.Create(OpCodes.Call, type_getTypeFromHandle_ref));
            instructions.Add(Instruction.Create(OpCodes.Ldloc_S, V_4));
            instructions.Add(Instruction.Create(OpCodes.Callvirt, type_IsInstanceOfType_ref));

            instructions.Add(Instruction.Create(OpCodes.Stloc_S, V_8));
            instructions.Add(Instruction.Create(OpCodes.Ldloc_S, V_8));

            var AudioTrackTypeDef = module.GetType("UnityEngine.Timeline", "AudioTrack");
            var AudioTrackType = Type.GetType(AudioTrackTypeDef.FullName + ", " + AudioTrackTypeDef.Module.Assembly.FullName);
            TypeReference audioTrack = module.ImportReference(AudioTrackType);
            var il_018e = Instruction.Create(OpCodes.Ldtoken, audioTrack);
            instructions.Add(Instruction.Create(OpCodes.Brfalse, il_018e));
            instructions.Add(Instruction.Create(OpCodes.Nop));
            instructions.Add(Instruction.Create(OpCodes.Ldloc_S, V_4));

            MethodInfo TrackAsset_get_curves = trackAssetType.GetMethod("get_curves", Type.EmptyTypes);
            MethodReference TrackAsset_get_curves_ref = module.ImportReference(TrackAsset_get_curves);
            instructions.Add(Instruction.Create(OpCodes.Callvirt, TrackAsset_get_curves_ref));
            instructions.Add(Instruction.Create(OpCodes.Ldnull));
            instructions.Add(Instruction.Create(OpCodes.Call, object_op_inequal_ref));

            var il_00b7 = Instruction.Create(OpCodes.Ldc_I4_0);
            instructions.Add(Instruction.Create(OpCodes.Brfalse_S, il_00b7));
            instructions.Add(Instruction.Create(OpCodes.Ldloc_S, V_4));
            instructions.Add(Instruction.Create(OpCodes.Callvirt, TrackAsset_get_curves_ref));

            MethodInfo AnimationClip_IsCloudResource = typeof(UnityEngine.AnimationClip).GetMethod("IsCloudResource", Type.EmptyTypes);
            MethodReference AnimationClip_IsCloudResource_ref = module.ImportReference(AnimationClip_IsCloudResource);
            instructions.Add(Instruction.Create(OpCodes.Callvirt, AnimationClip_IsCloudResource_ref));

            var il_00b8 = Instruction.Create(OpCodes.Stloc_S, V_10);
            instructions.Add(Instruction.Create(OpCodes.Br_S, il_00b8));
            instructions.Add(il_00b7);

            instructions.Add(il_00b8);
            instructions.Add(Instruction.Create(OpCodes.Ldloc_S, V_10));

            var il_00d4 = Instruction.Create(OpCodes.Nop);
            instructions.Add(Instruction.Create(OpCodes.Brfalse_S, il_00d4));
            instructions.Add(Instruction.Create(OpCodes.Nop));
            instructions.Add(Instruction.Create(OpCodes.Ldarg_2));
            instructions.Add(Instruction.Create(OpCodes.Ldind_Ref));
            instructions.Add(Instruction.Create(OpCodes.Ldloc_S, V_4));
            instructions.Add(Instruction.Create(OpCodes.Callvirt, TrackAsset_get_curves_ref));

            MethodInfo object_GetInstanceID = typeof(UnityEngine.Object).GetMethod("GetInstanceID", Type.EmptyTypes);
            MethodReference object_GetInstanceID_ref = module.ImportReference(object_GetInstanceID);
            instructions.Add(Instruction.Create(OpCodes.Callvirt, object_GetInstanceID_ref));

            MethodInfo list_add = typeof(System.Collections.Generic.List<Int32>).GetMethod("Add", new[] { typeof(Int32) });
            MethodReference list_add_ref = module.ImportReference(list_add);
            instructions.Add(Instruction.Create(OpCodes.Callvirt, list_add_ref));

            instructions.Add(Instruction.Create(OpCodes.Nop));
            instructions.Add(Instruction.Create(OpCodes.Nop));
            instructions.Add(il_00d4);
            instructions.Add(Instruction.Create(OpCodes.Ldloc_S, V_4));

            MethodInfo TrackAsset_get_clips = trackAssetType.GetMethod("get_clips", BindingFlags.Instance | BindingFlags.NonPublic, null, Type.EmptyTypes, null);
            MethodReference TrackAsset_get_clips_ref = module.ImportReference(TrackAsset_get_clips);
            instructions.Add(Instruction.Create(OpCodes.Callvirt, TrackAsset_get_clips_ref));

            instructions.Add(Instruction.Create(OpCodes.Stloc_S, V_11));
            instructions.Add(Instruction.Create(OpCodes.Ldc_I4_0));
            instructions.Add(Instruction.Create(OpCodes.Stloc_S, V_12));

            var il_0144 = Instruction.Create(OpCodes.Ldloc_S, V_12);
            instructions.Add(Instruction.Create(OpCodes.Br_S, il_0144));
            var il_00e3 = Instruction.Create(OpCodes.Ldloc_S, V_11);
            instructions.Add(il_00e3);
            instructions.Add(Instruction.Create(OpCodes.Ldloc_S, V_12));
            instructions.Add(Instruction.Create(OpCodes.Ldelem_Ref));

            instructions.Add(Instruction.Create(OpCodes.Stloc_S, V_13));
            instructions.Add(Instruction.Create(OpCodes.Nop));
            instructions.Add(Instruction.Create(OpCodes.Ldloc_S, V_13));

            MethodInfo TimelineClip_get_asset = TimelineClipType.GetMethod("get_asset", Type.EmptyTypes);
            MethodReference TimelineClip_get_asset_ref = module.ImportReference(TimelineClip_get_asset);
            instructions.Add(Instruction.Create(OpCodes.Callvirt, TimelineClip_get_asset_ref));

            TypeReference animationPlayableAsset = module.ImportReference(AnimationPlayableAssetType);
            instructions.Add(Instruction.Create(OpCodes.Isinst, animationPlayableAsset));
            instructions.Add(Instruction.Create(OpCodes.Stloc_S, V_14));
            instructions.Add(Instruction.Create(OpCodes.Ldloc_S, V_14));
            instructions.Add(Instruction.Create(OpCodes.Ldnull));
            instructions.Add(Instruction.Create(OpCodes.Call, object_op_inequal_ref));

            var il_0120 = Instruction.Create(OpCodes.Ldc_I4_0);
            instructions.Add(Instruction.Create(OpCodes.Brfalse_S, il_0120));
            instructions.Add(Instruction.Create(OpCodes.Ldloc_S, V_14));

            MethodInfo AnimationPlayableAsset_get_clip = AnimationPlayableAssetType.GetMethod("get_clip", Type.EmptyTypes);
            MethodReference AnimationPlayableAsset_get_clip_ref = module.ImportReference(AnimationPlayableAsset_get_clip);
            instructions.Add(Instruction.Create(OpCodes.Callvirt, AnimationPlayableAsset_get_clip_ref));
            instructions.Add(Instruction.Create(OpCodes.Ldnull));
            instructions.Add(Instruction.Create(OpCodes.Call, object_op_inequal_ref));

            instructions.Add(Instruction.Create(OpCodes.Brfalse_S, il_0120));
            instructions.Add(Instruction.Create(OpCodes.Ldloc_S, V_14));
            instructions.Add(Instruction.Create(OpCodes.Callvirt, AnimationPlayableAsset_get_clip_ref));
            instructions.Add(Instruction.Create(OpCodes.Callvirt, AnimationClip_IsCloudResource_ref));

            var il_0121 = Instruction.Create(OpCodes.Stloc_S, V_15);
            instructions.Add(Instruction.Create(OpCodes.Br_S, il_0121));

            instructions.Add(il_0120);
            instructions.Add(il_0121);
            instructions.Add(Instruction.Create(OpCodes.Ldloc_S, V_15));

            var il_013d = Instruction.Create(OpCodes.Nop);
            instructions.Add(Instruction.Create(OpCodes.Brfalse_S, il_013d));
            instructions.Add(Instruction.Create(OpCodes.Nop));
            instructions.Add(Instruction.Create(OpCodes.Ldarg_2));
            instructions.Add(Instruction.Create(OpCodes.Ldind_Ref));
            instructions.Add(Instruction.Create(OpCodes.Ldloc_S, V_14));
            instructions.Add(Instruction.Create(OpCodes.Callvirt, AnimationPlayableAsset_get_clip_ref));
            instructions.Add(Instruction.Create(OpCodes.Callvirt, object_GetInstanceID_ref));
            instructions.Add(Instruction.Create(OpCodes.Callvirt, list_add_ref));
            instructions.Add(Instruction.Create(OpCodes.Nop));
            instructions.Add(Instruction.Create(OpCodes.Nop));
            instructions.Add(il_013d);

            instructions.Add(Instruction.Create(OpCodes.Ldloc_S, V_12));
            instructions.Add(Instruction.Create(OpCodes.Ldc_I4_1));
            instructions.Add(Instruction.Create(OpCodes.Add));
            instructions.Add(Instruction.Create(OpCodes.Stloc_S, V_12));
            instructions.Add(il_0144);
            instructions.Add(Instruction.Create(OpCodes.Ldloc_S, V_11));
            instructions.Add(Instruction.Create(OpCodes.Ldlen));
            instructions.Add(Instruction.Create(OpCodes.Conv_I4));

            instructions.Add(Instruction.Create(OpCodes.Blt_S, il_00e3));
            instructions.Add(Instruction.Create(OpCodes.Ldloc_S, V_4));
            instructions.Add(Instruction.Create(OpCodes.Ldloc_1));
            instructions.Add(Instruction.Create(OpCodes.Callvirt, TrackAsset_GetGameObjectBinding_ref));

            instructions.Add(Instruction.Create(OpCodes.Stloc_S, V_9));
            instructions.Add(Instruction.Create(OpCodes.Ldloc_S, V_9));
            instructions.Add(Instruction.Create(OpCodes.Ldnull));
            instructions.Add(Instruction.Create(OpCodes.Call, object_op_inequal_ref));

            instructions.Add(Instruction.Create(OpCodes.Stloc_S, V_16));
            instructions.Add(Instruction.Create(OpCodes.Ldloc_S, V_16));

            var il_0188 = Instruction.Create(OpCodes.Nop);
            instructions.Add(Instruction.Create(OpCodes.Brfalse_S, il_0188));
            instructions.Add(Instruction.Create(OpCodes.Nop));
            instructions.Add(Instruction.Create(OpCodes.Ldloc_S, V_9));

            MethodInfo gameobject_getComponet_generic_animator = gameobject_getComponet.MakeGenericMethod(typeof(UnityEngine.Animator));
            MethodReference gameobject_getComponet_generic_animator_ref = module.ImportReference(gameobject_getComponet_generic_animator);
            instructions.Add(Instruction.Create(OpCodes.Callvirt, gameobject_getComponet_generic_animator_ref));

            instructions.Add(Instruction.Create(OpCodes.Stloc_S, V_17));
            instructions.Add(Instruction.Create(OpCodes.Ldloc_S, V_17));
            instructions.Add(Instruction.Create(OpCodes.Ldnull));
            instructions.Add(Instruction.Create(OpCodes.Call, object_op_inequal_ref));

            instructions.Add(Instruction.Create(OpCodes.Stloc_S, V_18));
            instructions.Add(Instruction.Create(OpCodes.Ldloc_S, V_18));

            var il_0187 = Instruction.Create(OpCodes.Nop);
            instructions.Add(Instruction.Create(OpCodes.Brfalse_S, il_0187));
            instructions.Add(Instruction.Create(OpCodes.Nop));
            instructions.Add(Instruction.Create(OpCodes.Ldloc_S, V_17));
            instructions.Add(Instruction.Create(OpCodes.Ldnull));

            MethodInfo Animator_set_runtimeAnimatorController = typeof(UnityEngine.Animator).GetMethod("set_runtimeAnimatorController", new[] { typeof(UnityEngine.RuntimeAnimatorController) });
            MethodReference Animator_set_runtimeAnimatorController_ref = module.ImportReference(Animator_set_runtimeAnimatorController);
            instructions.Add(Instruction.Create(OpCodes.Callvirt, Animator_set_runtimeAnimatorController_ref));
            instructions.Add(Instruction.Create(OpCodes.Nop));
            instructions.Add(Instruction.Create(OpCodes.Nop));
            instructions.Add(il_0187);
            instructions.Add(il_0188);

            instructions.Add(Instruction.Create(OpCodes.Br, il_025e));
            instructions.Add(il_018e);
            instructions.Add(Instruction.Create(OpCodes.Call, type_getTypeFromHandle_ref));
            instructions.Add(Instruction.Create(OpCodes.Ldloc_S, V_4));
            instructions.Add(Instruction.Create(OpCodes.Callvirt, type_IsInstanceOfType_ref));

            instructions.Add(Instruction.Create(OpCodes.Stloc_S, V_19));
            instructions.Add(Instruction.Create(OpCodes.Ldloc_S, V_19));
            instructions.Add(Instruction.Create(OpCodes.Brfalse, il_025e));
            instructions.Add(Instruction.Create(OpCodes.Nop));
            instructions.Add(Instruction.Create(OpCodes.Nop));

            instructions.Add(Instruction.Create(OpCodes.Ldloc_S, V_4));
            instructions.Add(Instruction.Create(OpCodes.Callvirt, TrackAsset_get_clips_ref));
            instructions.Add(Instruction.Create(OpCodes.Stloc_S, V_21));
            instructions.Add(Instruction.Create(OpCodes.Ldc_I4_0));
            instructions.Add(Instruction.Create(OpCodes.Stloc_S, V_22));

            var il_0219 = Instruction.Create(OpCodes.Ldloc_S, V_22);
            instructions.Add(Instruction.Create(OpCodes.Br_S, il_0219));
            var il_01b8 = Instruction.Create(OpCodes.Ldloc_S, V_21);
            instructions.Add(il_01b8);
            instructions.Add(Instruction.Create(OpCodes.Ldloc_S, V_22));
            instructions.Add(Instruction.Create(OpCodes.Ldelem_Ref));
            instructions.Add(Instruction.Create(OpCodes.Stloc_S, V_23));
            instructions.Add(Instruction.Create(OpCodes.Nop));
            instructions.Add(Instruction.Create(OpCodes.Ldloc_S, V_23));
            instructions.Add(Instruction.Create(OpCodes.Callvirt, TimelineClip_get_asset_ref));

            TypeReference audioPlayableAsset = module.ImportReference(AudioPlayableAssetType);
            instructions.Add(Instruction.Create(OpCodes.Isinst, audioPlayableAsset));

            instructions.Add(Instruction.Create(OpCodes.Stloc_S, V_24));
            instructions.Add(Instruction.Create(OpCodes.Ldloc_S, V_24));
            instructions.Add(Instruction.Create(OpCodes.Ldnull));
            instructions.Add(Instruction.Create(OpCodes.Call, object_op_inequal_ref));

            var il_01f5 = Instruction.Create(OpCodes.Ldc_I4_0);
            instructions.Add(Instruction.Create(OpCodes.Brfalse_S, il_01f5));
            instructions.Add(Instruction.Create(OpCodes.Ldloc_S, V_24));

            MethodInfo audioPlayableAsset_get_clip = AudioPlayableAssetType.GetMethod("get_clip", Type.EmptyTypes);
            MethodReference audioPlayableAsset_get_clip_ref = module.ImportReference(audioPlayableAsset_get_clip);
            instructions.Add(Instruction.Create(OpCodes.Callvirt, audioPlayableAsset_get_clip_ref));
            instructions.Add(Instruction.Create(OpCodes.Ldnull));
            instructions.Add(Instruction.Create(OpCodes.Call, object_op_inequal_ref));
            instructions.Add(Instruction.Create(OpCodes.Brfalse_S, il_01f5));
            instructions.Add(Instruction.Create(OpCodes.Ldloc_S, V_24));
            instructions.Add(Instruction.Create(OpCodes.Callvirt, audioPlayableAsset_get_clip_ref));

            MethodInfo AudioClip_IsCloudResource = typeof(UnityEngine.AudioClip).GetMethod("IsCloudResource", Type.EmptyTypes);
            MethodReference AudioClip_IsCloudResource_ref = module.ImportReference(AudioClip_IsCloudResource);
            instructions.Add(Instruction.Create(OpCodes.Callvirt, AudioClip_IsCloudResource_ref));

            var il_01f6 = Instruction.Create(OpCodes.Stloc_S, V_25);
            instructions.Add(Instruction.Create(OpCodes.Br_S, il_01f6));
            instructions.Add(il_01f5);
            instructions.Add(il_01f6);
            instructions.Add(Instruction.Create(OpCodes.Ldloc_S, V_25));

            var il_0212 = Instruction.Create(OpCodes.Nop);
            instructions.Add(Instruction.Create(OpCodes.Brfalse_S, il_0212));
            instructions.Add(Instruction.Create(OpCodes.Nop));
            instructions.Add(Instruction.Create(OpCodes.Ldarg_2));
            instructions.Add(Instruction.Create(OpCodes.Ldind_Ref));
            instructions.Add(Instruction.Create(OpCodes.Ldloc_S, V_24));
            instructions.Add(Instruction.Create(OpCodes.Callvirt, audioPlayableAsset_get_clip_ref));
            instructions.Add(Instruction.Create(OpCodes.Callvirt, object_GetInstanceID_ref));
            instructions.Add(Instruction.Create(OpCodes.Callvirt, list_add_ref));
            instructions.Add(Instruction.Create(OpCodes.Nop));
            instructions.Add(Instruction.Create(OpCodes.Nop));
            instructions.Add(il_0212);

            instructions.Add(Instruction.Create(OpCodes.Ldloc_S, V_22));
            instructions.Add(Instruction.Create(OpCodes.Ldc_I4_1));
            instructions.Add(Instruction.Create(OpCodes.Add));
            instructions.Add(Instruction.Create(OpCodes.Stloc_S, V_22));
            instructions.Add(il_0219);
            instructions.Add(Instruction.Create(OpCodes.Ldloc_S, V_21));
            instructions.Add(Instruction.Create(OpCodes.Ldlen));

            instructions.Add(Instruction.Create(OpCodes.Conv_I4));
            instructions.Add(Instruction.Create(OpCodes.Blt_S, il_01b8));
            instructions.Add(Instruction.Create(OpCodes.Ldloc_S, V_4));
            instructions.Add(Instruction.Create(OpCodes.Ldloc_1));
            instructions.Add(Instruction.Create(OpCodes.Callvirt, TrackAsset_GetGameObjectBinding_ref));
            instructions.Add(Instruction.Create(OpCodes.Stloc_S, V_20));
            instructions.Add(Instruction.Create(OpCodes.Ldloc_S, V_20));
            instructions.Add(Instruction.Create(OpCodes.Ldnull));
            instructions.Add(Instruction.Create(OpCodes.Call, object_op_inequal_ref));

            instructions.Add(Instruction.Create(OpCodes.Stloc_S, V_26));
            instructions.Add(Instruction.Create(OpCodes.Ldloc_S, V_26));

            var il_025d = Instruction.Create(OpCodes.Nop);
            instructions.Add(Instruction.Create(OpCodes.Brfalse_S, il_025d));
            instructions.Add(Instruction.Create(OpCodes.Nop));
            instructions.Add(Instruction.Create(OpCodes.Ldloc_S, V_20));

            MethodInfo gameobject_getComponet_generic_audiosource = gameobject_getComponet.MakeGenericMethod(typeof(UnityEngine.AudioSource));
            MethodReference gameobject_getComponet_generic_audiosource_ref = module.ImportReference(gameobject_getComponet_generic_audiosource);
            instructions.Add(Instruction.Create(OpCodes.Callvirt, gameobject_getComponet_generic_audiosource_ref));

            instructions.Add(Instruction.Create(OpCodes.Stloc_S, V_27));
            instructions.Add(Instruction.Create(OpCodes.Ldloc_S, V_27));
            instructions.Add(Instruction.Create(OpCodes.Ldnull));
            instructions.Add(Instruction.Create(OpCodes.Call, object_op_inequal_ref));

            instructions.Add(Instruction.Create(OpCodes.Stloc_S, V_28));
            instructions.Add(Instruction.Create(OpCodes.Ldloc_S, V_28));

            var il_025c = Instruction.Create(OpCodes.Nop);
            instructions.Add(Instruction.Create(OpCodes.Brfalse_S, il_025c));
            instructions.Add(Instruction.Create(OpCodes.Nop));
            instructions.Add(Instruction.Create(OpCodes.Ldloc_S, V_27));
            instructions.Add(Instruction.Create(OpCodes.Ldc_I4_0));

            MethodInfo AudioSource_set_playOnAwake = typeof(UnityEngine.AudioSource).GetMethod("set_playOnAwake", new[] {typeof(bool)});
            MethodReference AudioSource_set_playOnAwake_ref = module.ImportReference(AudioSource_set_playOnAwake);
            instructions.Add(Instruction.Create(OpCodes.Callvirt, AudioSource_set_playOnAwake_ref));
            instructions.Add(Instruction.Create(OpCodes.Nop));
            instructions.Add(Instruction.Create(OpCodes.Nop));
            instructions.Add(il_025c);
            instructions.Add(il_025d);
            instructions.Add(il_025e);
            instructions.Add(il_025f);

            MethodInfo IEnumerator_MoveNext = typeof(System.Collections.IEnumerator).GetMethod("MoveNext", Type.EmptyTypes);
            MethodReference IEnumerator_MoveNext_Ref = module.ImportReference(IEnumerator_MoveNext);
            instructions.Add(Instruction.Create(OpCodes.Callvirt, IEnumerator_MoveNext_Ref));
            instructions.Add(Instruction.Create(OpCodes.Brtrue, il_0035));
            var il_026a = Instruction.Create(OpCodes.Leave_S, il_0277);
            instructions.Add(il_026a);

            var il_026c = Instruction.Create(OpCodes.Ldloc_3);
            instructions.Add(il_026c);
            var il_0276 = Instruction.Create(OpCodes.Endfinally);
            instructions.Add(Instruction.Create(OpCodes.Brfalse_S, il_0276));

            instructions.Add(Instruction.Create(OpCodes.Ldloc_3));
            MethodInfo Dispose = typeof(System.IDisposable).GetMethod("Dispose", Type.EmptyTypes);
            MethodReference Dispose_ref = module.ImportReference(Dispose);
            instructions.Add(Instruction.Create(OpCodes.Callvirt, Dispose_ref));

            instructions.Add(Instruction.Create(OpCodes.Nop));
            instructions.Add(il_0276);
            instructions.Add(il_0277); //ret

            var handler = new ExceptionHandler(ExceptionHandlerType.Finally)
            {
                TryStart = il_0030,
                TryEnd = il_026c,
                HandlerStart = il_026c,
                HandlerEnd = il_0277
            };
            injectedMethod.Body.ExceptionHandlers.Clear();
            injectedMethod.Body.ExceptionHandlers.Add(handler);
        }
    }
}

#endif  //  IG_C301 || IG_C302 || IG_C303 || TUANJIE_2022_3_OR_NEWER, Auto generated by AddMacroForInstantGameFiles.exe
