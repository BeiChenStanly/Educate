#if  IG_C301 || IG_C302 || IG_C303 || TUANJIE_2022_3_OR_NEWER // Auto generated by AddMacroForInstantGameFiles.exe

using System.Collections.Generic;
using System.Linq;
using UnityEditor;
using UnityEditor.IMGUI.Controls;
using UnityEngine;
using UnityEngine.Assertions;
using System.IO;

namespace Unity.AutoStreaming
{
    internal class ASTextureTreeDataItem : TreeDataItem
    {
        public AutoStreamingSettingsTexture TextureSettings { get; set; }

        public ASTextureTreeDataItem(AutoStreamingSettingsTexture inSettings, int depth, int id)
            : base(inSettings.assetPath, depth, id)
        {
            TextureSettings = inSettings;
        }

        public ASTextureTreeDataItem(string inName, int depth, int id)
            : base(inName, depth, id)
        {
        }
    }

    internal class ASTexturesTreeView : TreeViewBaseT<ASTextureTreeDataItem>
    {
        enum MyColumns
        {
            AssetPath,
            Size,
            Width,
            Height,
            OnDemandDownload,
            Placeholder,
            AssetBundle,
            RefScenes,
            Warnings,
        }

        enum SortOption
        {
            AssetPath,
            Size,
            Width,
            Height,
            OnDemandDownload,
            Placeholder,
            AssetBundle,
            RefScenes,
            Warnings,
        }

        SortOption[] m_SortOptions =
        {
            SortOption.AssetPath,
            SortOption.Size,
            SortOption.Width,
            SortOption.Height,
            SortOption.OnDemandDownload,
            SortOption.Placeholder,
            SortOption.AssetBundle,
            SortOption.RefScenes,
            SortOption.Warnings,
        };

        internal class Styles
        {
            public static readonly GUIContent warningIcon = new GUIContent(EditorGUIUtility.IconContent("console.warnicon.sml").image, "Read/Write enabled. Please uncheck OnDemandDownload or Read/Write in Import Settings.");
            public static readonly string[] kMaxPlaceholderSizeStrings = {"0", "32", "64", "128", "256", "512", "1024", "Blur Placeholder" };
            public static readonly int[] kMaxPlaceholderSizeValues = { 0, 32, 64, 128, 256, 512, 1024, 1 };
        }

        public ASTexturesTreeView(TreeViewState state, MultiColumnHeader multicolumnHeader, TreeModelT<ASTextureTreeDataItem> model) : base(state, multicolumnHeader, model)
        {
            // Custom setup
            rowHeight = k_RowHeights;

            // lz: modified
            columnIndexForTreeFoldouts = 0;
            showAlternatingRowBackgrounds = true;
            showBorder = true;
            customFoldoutYOffset = (k_RowHeights - EditorGUIUtility.singleLineHeight) * 0.5f; // center foldout in the row since we also center content. See RowGUI
            multicolumnHeader.sortingChanged += OnSortingChanged;

            Reload();
        }

        protected override void SortByMultipleColumns()
        {
            var sortedColumns = multiColumnHeader.state.sortedColumns;

            if (sortedColumns.Length == 0)
                return;

            var myTypes = rootItem.children.Cast<TreeViewItemBaseT<ASTextureTreeDataItem>>();
            var orderedQuery = InitialOrder(myTypes, sortedColumns);
            for (int i = 1; i < sortedColumns.Length; i++)
            {
                SortOption sortOption = m_SortOptions[sortedColumns[i]];
                bool ascending = multiColumnHeader.IsSortedAscending(sortedColumns[i]);

                switch (sortOption)
                {
                    case SortOption.AssetPath:
                        orderedQuery = orderedQuery.ThenBy(l => l.Data.Name, ascending);
                        break;
                    case SortOption.Size:
                        orderedQuery = orderedQuery.ThenBy(l => l.Data.TextureSettings.runtimeMemory, ascending);
                        break;
                    case SortOption.Width:
                        orderedQuery = orderedQuery.ThenBy(l => l.Data.TextureSettings.width, ascending);
                        break;
                    case SortOption.Height:
                        orderedQuery = orderedQuery.ThenBy(l => l.Data.TextureSettings.height, ascending);
                        break;
                    case SortOption.OnDemandDownload:
                        orderedQuery = orderedQuery.ThenBy(l => l.Data.TextureSettings.usePlaceholder, ascending);
                        break;
                    case SortOption.Placeholder:
                        orderedQuery = orderedQuery.ThenBy(l => l.Data.TextureSettings.maxPlaceholderSize, ascending);
                        break;
                    case SortOption.AssetBundle:
                        orderedQuery = orderedQuery.ThenBy(l => l.Data.TextureSettings.assetBundleSize, ascending);
                        break;
                    case SortOption.RefScenes:
                        orderedQuery = orderedQuery.ThenBy(l => l.Data.TextureSettings.refs.Length, ascending);
                        break;
                    case SortOption.Warnings:
                        orderedQuery = orderedQuery.ThenBy(l => l.Data.TextureSettings.warningFlag, ascending);
                        break;
                }
            }

            rootItem.children = orderedQuery.Cast<TreeViewItem>().ToList();
        }

        IOrderedEnumerable<TreeViewItemBaseT<ASTextureTreeDataItem>> InitialOrder(IEnumerable<TreeViewItemBaseT<ASTextureTreeDataItem>> myTypes, int[] history)
        {
            SortOption sortOption = m_SortOptions[history[0]];
            bool ascending = multiColumnHeader.IsSortedAscending(history[0]);
            switch (sortOption)
            {
                case SortOption.AssetPath:
                    return myTypes.Order(l => l.Data.Name, ascending);
                case SortOption.Size:
                    return myTypes.Order(l => l.Data.TextureSettings.runtimeMemory, ascending);
                case SortOption.Width:
                    return myTypes.Order(l => l.Data.TextureSettings.width, ascending);
                case SortOption.Height:
                    return myTypes.Order(l => l.Data.TextureSettings.height, ascending);
                case SortOption.OnDemandDownload:
                    return myTypes.Order(l => l.Data.TextureSettings.usePlaceholder, ascending);
                case SortOption.Placeholder:
                    return myTypes.Order(l => l.Data.TextureSettings.maxPlaceholderSize, ascending);
                case SortOption.AssetBundle:
                    return myTypes.Order(l => l.Data.TextureSettings.assetBundleSize, ascending);
                case SortOption.RefScenes:
                    return myTypes.Order(l => l.Data.TextureSettings.refs.Length, ascending);
                case SortOption.Warnings:
                    return myTypes.Order(l => l.Data.TextureSettings.warningFlag, ascending);
                default:
                    Assert.IsTrue(false, "Unhandled enum");
                    break;
            }

            // default
            return myTypes.Order(l => l.Data.Name, ascending);
        }

        public static MultiColumnHeaderState CreateDefaultMultiColumnHeaderState(float treeViewWidth)
        {
            var columns = new[]
            {
                new MultiColumnHeaderState.Column
                {
                    headerContent = new GUIContent("AssetPath"),
                    headerTextAlignment = TextAlignment.Left,
                    sortedAscending = true,
                    sortingArrowAlignment = TextAlignment.Center,
                    width = 500,
                    minWidth = 100,
                    autoResize = false,
                    allowToggleVisibility = false
                },
                new MultiColumnHeaderState.Column
                {
                    headerContent = new GUIContent("RT Mem"),
                    headerTextAlignment = TextAlignment.Left,
                    sortedAscending = true,
                    sortingArrowAlignment = TextAlignment.Center,
                    width = 70,
                    minWidth = 50,
                    autoResize = false,
                    allowToggleVisibility = false
                },
                new MultiColumnHeaderState.Column
                {
                    headerContent = new GUIContent("Width"),
                    headerTextAlignment = TextAlignment.Left,
                    sortedAscending = true,
                    sortingArrowAlignment = TextAlignment.Center,
                    width = 50,
                    minWidth = 50,
                    autoResize = false,
                    allowToggleVisibility = false
                },
                new MultiColumnHeaderState.Column
                {
                    headerContent = new GUIContent("Height"),
                    headerTextAlignment = TextAlignment.Left,
                    sortedAscending = true,
                    sortingArrowAlignment = TextAlignment.Center,
                    width = 50,
                    minWidth = 50,
                    autoResize = false,
                    allowToggleVisibility = false
                },
                new MultiColumnHeaderState.Column
                {
                    headerContent = new GUIContent("OnDemandDownload"),
                    headerTextAlignment = TextAlignment.Left,
                    sortedAscending = true,
                    sortingArrowAlignment = TextAlignment.Center,
                    width = 50,
                    minWidth = 50,
                    autoResize = false,
                    allowToggleVisibility = false
                },
                new MultiColumnHeaderState.Column
                {
                    headerContent = new GUIContent("Placeholder"),
                    headerTextAlignment = TextAlignment.Left,
                    sortedAscending = true,
                    sortingArrowAlignment = TextAlignment.Center,
                    width = 90,
                    minWidth = 90,
                    autoResize = false,
                    allowToggleVisibility = false
                },
                new MultiColumnHeaderState.Column
                {
                    headerContent = new GUIContent("AB"),
                    headerTextAlignment = TextAlignment.Left,
                    sortedAscending = true,
                    sortingArrowAlignment = TextAlignment.Center,
                    width = 80,
                    minWidth = 50,
                    autoResize = false,
                    allowToggleVisibility = false
                },
                new MultiColumnHeaderState.Column
                {
                    headerContent = new GUIContent("References"),
                    headerTextAlignment = TextAlignment.Left,
                    sortedAscending = true,
                    sortingArrowAlignment = TextAlignment.Center,
                    width = 100,
                    minWidth = 100,
                    autoResize = false,
                    allowToggleVisibility = false
                },
                new MultiColumnHeaderState.Column
                {
                    headerContent = new GUIContent("Warning"),
                    headerTextAlignment = TextAlignment.Left,
                    sortedAscending = true,
                    sortingArrowAlignment = TextAlignment.Center,
                    width = 30,
                    minWidth = 20,
                    autoResize = false,
                    allowToggleVisibility = false
                },
            };

            // Assert.AreEqual(columns.Length, Enum.GetValues(typeof(MyColumns)).Length, "Number of columns should match number of enum values: You probably forgot to update one of them.");

            var state = new MultiColumnHeaderState(columns);
            return state;
        }

        protected override void SingleClickedItem(int id)
        {
            var textureItems = ASMainWindow.Instance.TextureData;

            if (id < textureItems.Count)
            {
                var textureItem = textureItems[id];
                Selection.activeObject = AssetDatabase.LoadMainAssetAtPath(textureItem.TextureSettings.assetPath);
            }
        }

        protected override void SelectionChanged(IList<int> selectedIds) 
        {
            if (selectedIds.Count == 0)
                return;
            int id = selectedIds[0];
            var textureItems = ASMainWindow.Instance.TextureData;

            if (id < textureItems.Count)
            {
                var textureItem = textureItems[id];
                Selection.activeObject = AssetDatabase.LoadMainAssetAtPath(textureItem.TextureSettings.assetPath);
            }
        }

        protected override void RowGUI(RowGUIArgs args)
        {
            var item = (TreeViewItemBaseT<ASTextureTreeDataItem>)args.item;

            for (int i = 0; i < args.GetNumVisibleColumns(); ++i)
            {
                CellGUI(args.GetCellRect(i), item, (MyColumns)args.GetColumn(i), ref args);
            }
        }

        void CellGUI(Rect cellRect, TreeViewItemBaseT<ASTextureTreeDataItem> item, MyColumns column, ref RowGUIArgs args)
        {
            // Center cell rect vertically (makes it easier to place controls, icons etc in the cells)
            CenterRectUsingSingleLineHeight(ref cellRect);

            switch (column)
            {
                case MyColumns.AssetPath:
                {
                    string value = item.Data.TextureSettings.assetPath;
                    DefaultGUI.Label(cellRect, value, args.selected, args.focused);
                }
                break;

                case MyColumns.Size:
                {
                    string value = EditorUtility.FormatBytes(item.Data.TextureSettings.runtimeMemory);
                    DefaultGUI.Label(cellRect, value, args.selected, args.focused);
                }
                break;

                case MyColumns.Width:
                {
                    string value = item.Data.TextureSettings.width.ToString();
                    DefaultGUI.Label(cellRect, value, args.selected, args.focused);
                }
                break;
                case MyColumns.Height:
                {
                    string value = item.Data.TextureSettings.height.ToString();
                    DefaultGUI.Label(cellRect, value, args.selected, args.focused);
                }
                break;
                case MyColumns.OnDemandDownload:
                {
                    // Do toggle
                    Rect toggleRect = cellRect;
                    toggleRect.width = k_ToggleWidth;
                    if (toggleRect.xMax < cellRect.xMax)
                    {
                        bool isEnabled = EditorGUI.Toggle(toggleRect, item.Data.TextureSettings.usePlaceholder);
                        if (isEnabled != item.Data.TextureSettings.usePlaceholder)
                        {
                            IList<int> ids = GetSelection();
                            if (!ids.Contains(item.id))
                            {
                                var tmpSettings = item.Data.TextureSettings;
                                tmpSettings.usePlaceholder = isEnabled;
                            }
                            else
                            {
                                List<ASTextureTreeDataItem> elems = ASMainWindow.Instance.TextureData;
                                foreach (int id in ids)
                                {
                                    var tmpSettings = elems[id].TextureSettings;
                                    tmpSettings.usePlaceholder = isEnabled;
                                }
                            }
                        } 
                    }
                }
                break;
                case MyColumns.Placeholder:
                {
                    Rect maxSizeRect = cellRect;
                    maxSizeRect.width = 65;
                    uint maxPlaceholderSize = item.Data.TextureSettings.maxPlaceholderSize;
                    uint maxSizeWoFlag = (maxPlaceholderSize & 0x0000ffff);
                    if ((maxPlaceholderSize & 0x00080000) != 0)
                    {
                        int oldMaxSize = (int)(maxPlaceholderSize & 0x0000ffff);
                        int newMaxSize = EditorGUI.IntPopup(maxSizeRect, oldMaxSize, Styles.kMaxPlaceholderSizeStrings, Styles.kMaxPlaceholderSizeValues);
                        if (newMaxSize != oldMaxSize)
                        {
                            IList<int> ids = GetSelection();
                            if (!ids.Contains(item.id))
                            {
                                var tmpSettings = item.Data.TextureSettings;
                                tmpSettings.maxPlaceholderSize = (uint)(0x00010000 | 0x00080000 | newMaxSize);
                                if (newMaxSize > 0)
                                    AssetDatabase.ImportAsset(tmpSettings.assetPath, ImportAssetOptions.ForceUpdate);
                                else
                                    AssetDatabase.DeleteAsset(AutoStreamingSettings.AssetPathToPlaceholderPath(tmpSettings.assetPath));
                            }
                            else
                            {
                                List<ASTextureTreeDataItem> elems = ASMainWindow.Instance.TextureData;
                                foreach (int id in ids)
                                {
                                    var tmpSettings = elems[id].TextureSettings;
                                    if ((tmpSettings.maxPlaceholderSize & 0x00080000) != 0)
                                        tmpSettings.maxPlaceholderSize = (uint)(0x00010000 | 0x00080000 | newMaxSize);
                                    if (newMaxSize > 0)
                                        AssetDatabase.ImportAsset(tmpSettings.assetPath, ImportAssetOptions.ForceUpdate);
                                    else
                                        AssetDatabase.DeleteAsset(AutoStreamingSettings.AssetPathToPlaceholderPath(tmpSettings.assetPath));
                                }
                            }
                        }
                    }
                    else
                    {
                        string value = "";

                        if ((maxPlaceholderSize & 0x00100000) != 0)
                            value = "SpriteAtlas";
                        else
                        {
                            if ((maxPlaceholderSize & 0x00020000) != 0)
                                value += "tex_";
                            else if ((maxPlaceholderSize & 0x00040000) != 0)
                                value += "ihv_";

                            if (maxSizeWoFlag == 0)
                                value += "none";
                            else if (maxSizeWoFlag == 1)
                                value += "blur";
                            else if (maxSizeWoFlag == 2)
                                value += "trans";
                            else
                                value += maxSizeWoFlag.ToString();
                        }

                        DefaultGUI.Label(maxSizeRect, value, args.selected, args.focused);
                    }

                    var placeholderPath = AutoStreamingSettings.AssetPathToPlaceholderPath(item.Data.TextureSettings.assetPath);
                    if (File.Exists(placeholderPath))
                    {
                        Rect placeholderRect = cellRect;
                        placeholderRect.x = maxSizeRect.xMax;
                        placeholderRect.width = 20;
                        if (GUI.Button(placeholderRect, "F"))
                        {
                            Selection.activeObject = AssetDatabase.LoadMainAssetAtPath(placeholderPath);
                        }
                    }
                }
                break;
                case MyColumns.AssetBundle:
                {
                    string value = EditorUtility.FormatBytes(item.Data.TextureSettings.assetBundleSize);
                    DefaultGUI.Label(cellRect, value, args.selected, args.focused);
                }
                break;
                case MyColumns.RefScenes:
                {
                    string value = string.Join(",", item.Data.TextureSettings.refs);
                    DefaultGUI.Label(cellRect, value, args.selected, args.focused);
                }
                break;
                case MyColumns.Warnings:
                {
                    if (item.Data.TextureSettings.warningFlag != 0)
                        EditorGUI.LabelField(cellRect, Styles.warningIcon);
                }
                break;
            }
        }
    }
}

#endif  //  IG_C301 || IG_C302 || IG_C303 || TUANJIE_2022_3_OR_NEWER, Auto generated by AddMacroForInstantGameFiles.exe
