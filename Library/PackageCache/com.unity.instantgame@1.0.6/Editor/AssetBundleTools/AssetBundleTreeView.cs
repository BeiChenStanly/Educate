#if  IG_C301 || IG_C302 || IG_C303 || TUANJIE_2022_3_OR_NEWER // Auto generated by AddMacroForInstantGameFiles.exe

using System.Collections.Generic;
using UnityEngine;
using UnityEditor;
using UnityEditor.IMGUI.Controls;
using System.Linq;
using UnityEngine.Assertions;
using System.IO;
using System;

namespace Unity.AutoStreaming
{
    internal class ABTreeDataItem : TreeDataItem
    {
        public AssetBundle ab { get; set; }
        public string abPath { get; set; }
        public int abSize { get; set; }
        public List<string> depABs;
        public List<ABDepDataItem> allDepABDataItems;
        public int reverseDepCount;
        public int totalDepSize;
        public ABTreeDataItem(string inName, int depth, int id)
            : base(inName, depth, id)
        {
            depABs = new List<string>();
        }

        public override bool MatchesSearch(string search)
        {
            Func<string, bool> matchOp = (string itemName) => {
                return (AssetBundleToolsUI.ins.mABSearchMode2 == AssetBundleToolsUI.ABSearchMode2.Match) ?
                    itemName.Equals(search) :
                    itemName.Contains(search);
            };

            if (AssetBundleToolsUI.ins.mABSearchMode1 == AssetBundleToolsUI.ABSearchMode1.ABName)
            {
                if (matchOp(Name))
                    return true;
            }

            if (AssetBundleToolsUI.ins.mABSearchMode1 == AssetBundleToolsUI.ABSearchMode1.Assets)
            {
                var objsList = AssetBundleToolsUI.ins.mABObjsList;
                if (Id > 0 && Id < objsList.Count)
                {
                    var abObjs = objsList[Id];
                    foreach (var obj in abObjs)
                    {
                        if (matchOp(obj.objName))
                            return true;
                    }
                }

                var assetsList = AssetBundleToolsUI.ins.mABAssetsList;
                if (Id > 0 && Id < assetsList.Count)
                {
                    var abAssets = assetsList[Id];
                    foreach (var asset in abAssets)
                    {
                        if (matchOp(asset.assetName))
                            return true;
                    }
                }
            }

            if (AssetBundleToolsUI.ins.mABSearchMode1 == AssetBundleToolsUI.ABSearchMode1.Dependencies)
            {
                foreach (var dep in allDepABDataItems)
                {
                    if (matchOp(dep.abName))
                        return true;
                }
            }

            return false;
        }
    }

    internal class AssetBundleTreeView : TreeViewBaseT<ABTreeDataItem>
    {
        enum MyColumns
        {
            AssetBundleName,
            AssetBundleSize,
            DirectDepCount,
            DepCount,
            DepTotalSize,
            ReverseDepCount,
        }
        enum SortOption
        {
            AssetBundleName,
            AssetBundleSize,
            DirectDepCount,
            DepCount,
            DepTotalSize,
            ReverseDepCount,
        }

        SortOption[] m_SortOptions =
        {
            SortOption.AssetBundleName,
            SortOption.AssetBundleSize,
            SortOption.DirectDepCount,
            SortOption.DepCount,
            SortOption.DepTotalSize,
            SortOption.ReverseDepCount,
        };

        public Action<IList<int>> mSelectionChanged;
        public Func<TreeViewItem, string, bool> mDoesItemMatchSearch;

        public AssetBundleTreeView(TreeViewState state, MultiColumnHeader multicolumnHeader, TreeModelT<ABTreeDataItem> model) : base(state, multicolumnHeader, model)
        {
            // Custom setup
            rowHeight = k_RowHeights;

            columnIndexForTreeFoldouts = 0;
            showAlternatingRowBackgrounds = true;
            showBorder = true;
            customFoldoutYOffset = (k_RowHeights - EditorGUIUtility.singleLineHeight) * 0.5f; // center foldout in the row since we also center content. See RowGUI

            multicolumnHeader.sortingChanged += OnSortingChanged;

            Reload();
        }

        protected override void SortByMultipleColumns()
        {
            var sortedColumns = multiColumnHeader.state.sortedColumns;

            if (sortedColumns.Length == 0)
                return;

            var myTypes = rootItem.children.Cast<TreeViewItemBaseT<ABTreeDataItem>>();
            var orderedQuery = InitialOrder(myTypes, sortedColumns);
            for (int i = 1; i < sortedColumns.Length; i++)
            {
                SortOption sortOption = m_SortOptions[sortedColumns[i]];
                bool ascending = multiColumnHeader.IsSortedAscending(sortedColumns[i]);

                switch (sortOption)
                {
                    case SortOption.AssetBundleName:
                        orderedQuery = orderedQuery.ThenBy(l => l.Data.Name, ascending);
                        break;
                    case SortOption.AssetBundleSize:
                        orderedQuery = orderedQuery.ThenBy(l => l.Data.abSize, ascending);
                        break;
                    case SortOption.DirectDepCount:
                        orderedQuery = orderedQuery.ThenBy(l => l.Data.depABs.Count, ascending);
                        break;
                    case SortOption.DepCount:
                        orderedQuery = orderedQuery.ThenBy(l => l.Data.allDepABDataItems.Count, ascending);
                        break;
                    case SortOption.DepTotalSize:
                        orderedQuery = orderedQuery.ThenBy(l => l.Data.totalDepSize, ascending);
                        break;
                    case SortOption.ReverseDepCount:
                        orderedQuery = orderedQuery.ThenBy(l => l.Data.reverseDepCount, ascending);
                        break;
                }
            }

            rootItem.children = orderedQuery.Cast<TreeViewItem>().ToList();
        }

        IOrderedEnumerable<TreeViewItemBaseT<ABTreeDataItem>> InitialOrder(IEnumerable<TreeViewItemBaseT<ABTreeDataItem>> myTypes, int[] history)
        {
            SortOption sortOption = m_SortOptions[history[0]];
            bool ascending = multiColumnHeader.IsSortedAscending(history[0]);
            switch (sortOption)
            {
                case SortOption.AssetBundleName:
                    return myTypes.Order(l => l.Data.Name, ascending);
                case SortOption.AssetBundleSize:
                    return myTypes.Order(l => l.Data.abSize, ascending);
                case SortOption.DirectDepCount:
                    return myTypes.Order(l => l.Data.depABs.Count, ascending);
                case SortOption.DepCount:
                    return myTypes.Order(l => l.Data.allDepABDataItems.Count, ascending);
                case SortOption.DepTotalSize:
                    return myTypes.Order(l => l.Data.totalDepSize, ascending);
                case SortOption.ReverseDepCount:
                    return myTypes.Order(l => l.Data.reverseDepCount, ascending);
                default:
                    Assert.IsTrue(false, "Unhandled enum");
                    break;
            }

            // default
            return myTypes.Order(l => l.Data.Name, ascending);
        }

        public static MultiColumnHeaderState CreateDefaultMultiColumnHeaderState(float treeViewWidth)
        {
            var columns = new[]
            {
                new MultiColumnHeaderState.Column
                {
                    headerContent = new GUIContent("AssetBundle"),
                    headerTextAlignment = TextAlignment.Left,
                    sortedAscending = true,
                    sortingArrowAlignment = TextAlignment.Center,
                    width = 250,
                    minWidth = 100,
                    autoResize = false,
                    allowToggleVisibility = false
                },
                new MultiColumnHeaderState.Column
                {
                    headerContent = new GUIContent("Size"),
                    headerTextAlignment = TextAlignment.Left,
                    sortedAscending = true,
                    sortingArrowAlignment = TextAlignment.Center,
                    width = 60,
                    minWidth = 50,
                    autoResize = false,
                    allowToggleVisibility = false
                },
                new MultiColumnHeaderState.Column
                {
                    headerContent = new GUIContent("DirectDep"),
                    headerTextAlignment = TextAlignment.Left,
                    sortedAscending = true,
                    sortingArrowAlignment = TextAlignment.Center,
                    width = 70,
                    minWidth = 50,
                    autoResize = false,
                    allowToggleVisibility = false
                },
                new MultiColumnHeaderState.Column
                {
                    headerContent = new GUIContent("AllDep"),
                    headerTextAlignment = TextAlignment.Left,
                    sortedAscending = true,
                    sortingArrowAlignment = TextAlignment.Center,
                    width = 50,
                    minWidth = 50,
                    autoResize = false,
                    allowToggleVisibility = false
                },
                new MultiColumnHeaderState.Column
                {
                    headerContent = new GUIContent("AllDepSize"),
                    headerTextAlignment = TextAlignment.Left,
                    sortedAscending = true,
                    sortingArrowAlignment = TextAlignment.Center,
                    width = 70,
                    minWidth = 50,
                    autoResize = false,
                    allowToggleVisibility = false
                },
                new MultiColumnHeaderState.Column
                {
                    headerContent = new GUIContent("rDep"),
                    headerTextAlignment = TextAlignment.Left,
                    sortedAscending = true,
                    sortingArrowAlignment = TextAlignment.Center,
                    width = 70,
                    minWidth = 50,
                    autoResize = false,
                    allowToggleVisibility = false
                },
            };

            // Assert.AreEqual(columns.Length, Enum.GetValues(typeof(MyColumns)).Length, "Number of columns should match number of enum values: You probably forgot to update one of them.");

            var state = new MultiColumnHeaderState(columns);
            return state;
        }

        protected override void RowGUI(RowGUIArgs args)
        {
            var item = (TreeViewItemBaseT<ABTreeDataItem>)args.item;

            for (int i = 0; i < args.GetNumVisibleColumns(); ++i)
            {
                CellGUI(args.GetCellRect(i), item, (MyColumns)args.GetColumn(i), ref args);
            }
        }

        void CellGUI(Rect cellRect, TreeViewItemBaseT<ABTreeDataItem> item, MyColumns column, ref RowGUIArgs args)
        {
            // Center cell rect vertically (makes it easier to place controls, icons etc in the cells)
            CenterRectUsingSingleLineHeight(ref cellRect);

            switch (column)
            {
                case MyColumns.AssetBundleName:
                {
                    string value = item.Data.Name;
                    DefaultGUI.Label(cellRect, value, args.selected, args.focused);
                }
                break;
                case MyColumns.AssetBundleSize:
                {
                    string value = EditorUtility.FormatBytes(item.Data.abSize);
                    DefaultGUI.Label(cellRect, value, args.selected, args.focused);
                }
                break;
                case MyColumns.DirectDepCount:
                {
                    string value = item.Data.depABs.Count.ToString();
                    DefaultGUI.Label(cellRect, value, args.selected, args.focused);
                }
                break;
                case MyColumns.DepCount:
                {
                    string value = item.Data.allDepABDataItems.Count.ToString();
                    DefaultGUI.Label(cellRect, value, args.selected, args.focused);
                }
                break;
                case MyColumns.DepTotalSize:
                {
                    string value = EditorUtility.FormatBytes(item.Data.totalDepSize);
                    DefaultGUI.Label(cellRect, value, args.selected, args.focused);
                }
                break;
                case MyColumns.ReverseDepCount:
                {
                    string value = item.Data.reverseDepCount.ToString();
                    DefaultGUI.Label(cellRect, value, args.selected, args.focused);
                }
                break;
            }
        }

        override protected void SelectionChanged(IList<int> selectedIds)
        {
            if (mSelectionChanged != null)
                mSelectionChanged(selectedIds);
        }
    }
}

#endif  //  IG_C301 || IG_C302 || IG_C303 || TUANJIE_2022_3_OR_NEWER, Auto generated by AddMacroForInstantGameFiles.exe
