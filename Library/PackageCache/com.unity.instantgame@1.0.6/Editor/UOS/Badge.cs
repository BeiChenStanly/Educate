#if  IG_C301 || IG_C302 || IG_C303 || TUANJIE_2022_3_OR_NEWER // Auto generated by AddMacroForInstantGameFiles.exe

using System;
using System.IO;
using System.Net;
using UnityEditor;
using UnityEngine;

namespace Unity.AutoStreaming.CloudContentDelivery
{
    [Serializable]
    internal class Badge
    {
        public string name;
        public string releaseid;
        public string islocked;
        Badge(string n, string rid, bool locked)
        {
            name = n;
            releaseid = rid;
            islocked = locked ? "true" : "false";
        }

        public static Badge[] LoadBadges(string uosAuthorizationToken, string bucketUuid)
        {
            if (string.IsNullOrEmpty(bucketUuid))
            {
                return null;
            }
            string url = string.Format("{0}api/v1/buckets/{1}/badges/?page={2}&per_page={3}", UOSInfo.ApiHost, bucketUuid, 1, 1000);

            try
            {
                using (HttpWebResponse resp = (HttpWebResponse)Util.GetHttpWebRequest4UOSThreaded(uosAuthorizationToken, url, "GET").GetResponse())
                {
                    if (resp.StatusCode.Equals(HttpStatusCode.OK))
                    {
                        string strJson;
                        using (Stream stream = resp.GetResponseStream())
                        {
                            using (StreamReader reader = new StreamReader(stream))
                            {
                                strJson = reader.ReadToEnd();
                            }
                        }
                        return JsonUtility.FromJson<BadgesRoot>("{\"Badges\":" + strJson + "}").Badges;
                    }
                    else
                    {
                        Debug.LogError(string.Format("Failed loading badges."));
                    }
                }
            }
            catch (Exception e)
            {
                EditorUtility.DisplayDialog("Load Badges Error", e.Message, "OK");
            }
            return null;
        }

        public static void CreateOrUpdateBadge(string uosAuthorizationToken, string bucketUuid, string badgeName, string releaseid, bool locked = false)
        {
            EditorUtility.DisplayProgressBar("AutoStreaming Remote Deploy", "Update Badge", 0.9f);

            if (string.IsNullOrEmpty(bucketUuid)
                || string.IsNullOrEmpty(badgeName)
                || string.IsNullOrEmpty(releaseid))
            {
                EditorUtility.ClearProgressBar();
                return;
            }

            if (badgeName.Equals("latest"))
            {
                EditorUtility.ClearProgressBar();
                return;
            }


            badgeName = badgeName.Replace('.', '_');
            string url = string.Format("{0}api/v1/buckets/{1}/badges/", UOSInfo.ApiHost, bucketUuid);
            string requestBody = JsonUtility.ToJson(new Badge(badgeName, releaseid, locked));

            try
            {
                using (HttpWebResponse resp = (HttpWebResponse)Util.GetHttpWebRequest4UOSThreaded(uosAuthorizationToken, url, "PUT", requestBody).GetResponse())
                {
                    if (!resp.StatusCode.Equals(HttpStatusCode.OK))
                    {
                        Debug.LogError(string.Format("Failed creating/updating badge : {0}", badgeName));
                    }
                }
            }
            catch (Exception e)
            {
                EditorUtility.DisplayDialog("Create/Update badge Error", e.Message, "OK");
            }
            EditorUtility.ClearProgressBar();
        }

        public static void DeleteBadge(string uosAuthorizationToken, string badgeName, string bucketUuid)
        {
            if (string.IsNullOrEmpty(bucketUuid) || string.IsNullOrEmpty(badgeName))
            {
                return;
            }
            string url = string.Format("{0}api/v1/buckets/{1}/badges/{2}", UOSInfo.ApiHost, bucketUuid, badgeName);

            try
            {
                using (HttpWebResponse resp = (HttpWebResponse)Util.GetHttpWebRequest4UOSThreaded(uosAuthorizationToken, url, "DELETE").GetResponse())
                {
                    if (!resp.StatusCode.Equals(HttpStatusCode.OK))
                    {
                        Debug.LogError(string.Format("Failed Deleting badge : {0}", badgeName));
                    }
                }
            }
            catch (Exception e)
            {
                EditorUtility.DisplayDialog("Delete badge Error", e.Message, "OK");
            }
        }

        public static void LockBadge(string uosAuthorizationToken, string bucketUuid, string badgeName, string releaseid, bool toLock)
        {
            CreateOrUpdateBadge(uosAuthorizationToken, bucketUuid, badgeName, releaseid, toLock);
        }
    }

    [Serializable]
    internal class BadgesRoot
    {
        public Badge[] Badges;
    }
}

#endif  //  IG_C301 || IG_C302 || IG_C303 || TUANJIE_2022_3_OR_NEWER, Auto generated by AddMacroForInstantGameFiles.exe
