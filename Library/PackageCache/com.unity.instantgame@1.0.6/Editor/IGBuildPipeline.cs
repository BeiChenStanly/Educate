#if  IG_C301 || IG_C302 || IG_C303 || TUANJIE_2022_3_OR_NEWER // Auto generated by AddMacroForInstantGameFiles.exe

using System;
using System.IO;
using UnityEditor;
using UnityEditor.Build.Reporting;
using UnityEngine;
using Unity.AutoStreaming;

namespace Unity.InstantGame
{
    public class IGBuildPipeline
    {
        private static Action<BuildPlayerOptions> buildPlayerHandler;

        public static void RegisterBuildPlayerHandler(Action<BuildPlayerOptions> func)
        {
            // Display a warning if user scripts try to register this delegate multiple times
            if (func != null && buildPlayerHandler != null)
                Debug.LogWarning("The build player handler in BuildPlayerWindow is being reassigned!");

            buildPlayerHandler = func;
        }


        public static string GetInstantGameCDNRoot() 
        {
            if (!PlayerSettings.autoStreaming)
                return "";

            if (string.IsNullOrEmpty(ASUOSHelper.BucketUuid) || string.IsNullOrEmpty(ASUOSHelper.BucketName) || string.IsNullOrEmpty(ASUOSHelper.BadgeName))
            {
                Debug.LogError(" Uos CDN settings are invalid or empty");
                return "";
            }

            return ASUOSHelper.AutoStreamingPath;
        }

        public static BuildReport BuildPlayer(BuildPlayerOptions buildPlayerOptions)
        {
            buildPlayerOptions.options |= BuildOptions.EnableInstantGame;
#if UNITY_ANDROID
            if (EditorUserBuildSettings.exportAsGoogleAndroidProject)
            {
                throw new InvalidOperationException("Instantgame do not support export project, please disable it in BuildSettings. If you want to build apk/export project with AutoStreaming enabled, do that in BuildSettings Panel.");
            }

            buildPlayerOptions.target = BuildTarget.Android;

            if (string.IsNullOrEmpty(buildPlayerOptions.locationPathName) || !buildPlayerOptions.locationPathName.EndsWith(".apk"))
            {
                if (!Directory.Exists(Path.GetDirectoryName(Application.dataPath) + "/" + IGBuildConstants.k_OutputDir))
                    Directory.CreateDirectory(Path.GetDirectoryName(Application.dataPath) + "/" + IGBuildConstants.k_OutputDir);

                var tempApkPath = Path.GetDirectoryName(Application.dataPath) + "/" + IGBuildConstants.k_OutputDir + "/" + IGBuildConstants.k_ApkName;
                buildPlayerOptions.locationPathName = tempApkPath;
            }

            //set compresion method to LZ4HC
            EditorUserBuildSettings.SetCompressionType(BuildTargetGroup.Android, Compression.Lz4HC);
#endif //UNITY_ANDROID
            BuildReport report = null;
            try
            {
                if (buildPlayerHandler != null)
                {
                    buildPlayerHandler(buildPlayerOptions);
                    report = BuildReport.GetLatestReport();
                }
                else
                {
                    report = BuildPipeline.BuildPlayer(buildPlayerOptions);
                }
            }
            catch (Exception e)
            {
                if (!string.IsNullOrEmpty(e.Message))
                    Debug.LogError(e);
            }
            finally
            {

            }
            return report;
        }

        public static BuildReport BuildPlayer(EditorBuildSettingsScene[] levels, string locationPathName, BuildTarget target, BuildOptions options)
        {
            BuildPlayerOptions buildPlayerOptions = new BuildPlayerOptions();
            buildPlayerOptions.scenes = EditorBuildSettingsScene.GetActiveSceneList(levels);
            buildPlayerOptions.locationPathName = locationPathName;
            buildPlayerOptions.target = target;
            buildPlayerOptions.options = options;
            return BuildPlayer(buildPlayerOptions);
        }

        public static BuildReport BuildPlayer(string[] levels, string locationPathName, BuildTarget target, BuildOptions options)
        {
            BuildTargetGroup buildTargetGroup = BuildPipeline.GetBuildTargetGroup(target);
            BuildPlayerOptions buildPlayerOptions = new BuildPlayerOptions();
            buildPlayerOptions.scenes = levels;
            buildPlayerOptions.locationPathName = locationPathName;
            buildPlayerOptions.targetGroup = buildTargetGroup;
            buildPlayerOptions.target = target;
            buildPlayerOptions.options = options;
            return BuildPlayer(buildPlayerOptions);
        }

        static void CopyDirectory(string sourceDir, string destinationDir)
        {
            var srcDir = new DirectoryInfo(sourceDir);

            if (!srcDir.Exists)
                return;


            if ( !Directory.Exists(destinationDir))
            {
                Directory.CreateDirectory(destinationDir);
            }
            else 
            {
                var destDir = new DirectoryInfo(destinationDir);
                foreach (FileInfo file in destDir.GetFiles())
                    file.Delete();

                foreach (DirectoryInfo dir in destDir.GetDirectories())
                    dir.Delete(true);
            }

            
            // Get the files in the source directory and copy to the destination directory
            foreach (FileInfo file in srcDir.GetFiles())
            {
                string targetFilePath = Path.Combine(destinationDir, file.Name);
                file.CopyTo(targetFilePath);
            }

            foreach (DirectoryInfo subDir in srcDir.GetDirectories())
            {
                string newDestinationDir = Path.Combine(destinationDir, subDir.Name);
                CopyDirectory(subDir.FullName, newDestinationDir);
            }

        }

        public static bool UploadWeChatDataFile(string dataFilePath) 
        {
#if UNITY_WEBGL
            if (!PlayerSettings.autoStreaming)
                return true;

            if (string.IsNullOrEmpty(dataFilePath))
            {
                Debug.LogError("AS: Empty data file path.");
                return false;
            }

            var srcFilePath = Path.GetFullPath(dataFilePath);
            if (!File.Exists(srcFilePath))
            {
                Debug.LogError(string.Format("AS: Data file \"{0}\" not found.", srcFilePath));
                return false;
            }

            EditorUtility.DisplayProgressBar("AutoStreaming data uploading", "Copy files...", 0.1f);
            //data file
            var destDataFilePath = Path.Combine(ASBuildConstants.k_CustomCloudAssetsPath, Path.GetFileName(dataFilePath));
            File.Copy(srcFilePath, destDataFilePath, true);

            var outputDir = Path.GetDirectoryName(srcFilePath);

            //StreamingAssets
            var srcStreamingAssetsFolder = Path.Combine(outputDir, "StreamingAssets");
            var destStreamingAssetsFolder = Path.Combine(ASBuildConstants.k_CustomCloudAssetsPath, "StreamingAssets");
            CopyDirectory(srcStreamingAssetsFolder, destStreamingAssetsFolder);


            //Assets
            var srcAssets = Path.Combine(outputDir, "Assets");
            var destAssetsFolder = Path.Combine(ASBuildConstants.k_CustomCloudAssetsPath, "Assets");
            CopyDirectory(srcAssets, destAssetsFolder);
            EditorUtility.ClearProgressBar();

            return ASConfigUI.UploadToUOS();
#else
            return false;
#endif
        }

    }
    }

#endif  //  IG_C301 || IG_C302 || IG_C303 || TUANJIE_2022_3_OR_NEWER, Auto generated by AddMacroForInstantGameFiles.exe
